// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace GTR_AUTOMATED.Features.WorkManagement
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("0.0.015 - Creation of Campaigns work order")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class _0_0_015_CreationOfCampaignsWorkOrderFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/Work Management", "0.0.015 - Creation of Campaigns work order", "This procedure defines the creation of Campaigns in the Maximo System", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "GTR-UAT-CMS-015.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01) Creation of a Qualification")]
        [NUnit.Framework.CategoryAttribute("CreationofCampaignsintheMaximoSystem")]
        [NUnit.Framework.TestCaseAttribute("training manager", null)]
        public async global::System.Threading.Tasks.Task _01CreationOfAQualification(string role, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "CreationofCampaignsintheMaximoSystem"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("01) Creation of a Qualification", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
      await testRunner.GivenAsync("I sign as training manager", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
   await testRunner.AndAsync("I open application Qualifications", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 10
   await testRunner.AndAsync("I select New Qualification", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table497 = new global::Reqnroll.Table(new string[] {
                            "Qualification Code",
                            "Qualification Description"});
                table497.AddRow(new string[] {
                            "TEST_CMS",
                            "Qualification for Unit Familiarity"});
#line 11
   await testRunner.AndAsync("I enter Qualifications Details:", ((string)(null)), table497, "And ");
#line hidden
#line 14
   await testRunner.AndAsync("I open Select Value lookup of Qualification Type field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table498 = new global::Reqnroll.Table(new string[] {
                            "Qualification Type"});
                table498.AddRow(new string[] {
                            "REFRESH"});
#line 15
   await testRunner.AndAsync("I select Qualification Type:", ((string)(null)), table498, "And ");
#line hidden
#line 18
      await testRunner.AndAsync("I select Qualification Type", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table499 = new global::Reqnroll.Table(new string[] {
                            "Parent Qualification",
                            "Duration"});
                table499.AddRow(new string[] {
                            "TQ0099",
                            "1"});
#line 19
   await testRunner.AndAsync("I enter following:", ((string)(null)), table499, "And ");
#line hidden
#line 22
   await testRunner.AndAsync("I open Select Value lookup of Duration Period field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
      await testRunner.AndAsync("I select Years from the list", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table500 = new global::Reqnroll.Table(new string[] {
                            "Required Use Length"});
                table500.AddRow(new string[] {
                            "6"});
#line 24
   await testRunner.AndAsync("I enter Required Use Length:", ((string)(null)), table500, "And ");
#line hidden
#line 27
   await testRunner.AndAsync("I open Select Value lookup of Required Use Period field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 28
      await testRunner.AndAsync("I select MONTHS from the list", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
   await testRunner.AndAsync("I select New Row under the Required Craft and Skill Level section", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 30
   await testRunner.AndAsync("I choose Select Value from Detail Menu of Craft field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table501 = new global::Reqnroll.Table(new string[] {
                            "Craft",
                            "Skill-Level"});
                table501.AddRow(new string[] {
                            "TRAINING",
                            "SEMI-SKILLED"});
#line 31
   await testRunner.AndAsync("I filter table Craft and Skill Level:", ((string)(null)), table501, "And ");
#line hidden
#line 34
      await testRunner.AndAsync("I select no. 1 record from Craft and Skill Level table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 35
   await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 36
      await testRunner.AndAsync("I take screenshot of Creation of Campaigns work order Test Scenario one", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02) Creating new Training Course Job Plans")]
        [NUnit.Framework.TestCaseAttribute("cms admin team leader", null)]
        public async global::System.Threading.Tasks.Task _02CreatingNewTrainingCourseJobPlans(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("02) Creating new Training Course Job Plans", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 45
     await testRunner.GivenAsync("I sign as cms admin team leader", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 46
  await testRunner.AndAsync("I open application Job Plans (Tr)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 47
  await testRunner.AndAsync("I select New Job Plan", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table502 = new global::Reqnroll.Table(new string[] {
                            "ID",
                            "Description"});
                table502.AddRow(new string[] {
                            "CMS_TEST40",
                            "Campaigns Job Plan"});
#line 48
  await testRunner.AndAsync("I enter Job Plan:", ((string)(null)), table502, "And ");
#line hidden
#line 51
  await testRunner.AndAsync("I open Select Value lookup of Organisation field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 52
  await testRunner.AndAsync("I select no. 1 record from Organisation table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 53
  await testRunner.AndAsync("I open Select Value lookup of Site field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 54
  await testRunner.AndAsync("I select no. 1 record from Site table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table503 = new global::Reqnroll.Table(new string[] {
                            "Duration"});
                table503.AddRow(new string[] {
                            "4:00"});
#line 55
  await testRunner.AndAsync("I enter Duration:", ((string)(null)), table503, "And ");
#line hidden
#line 58
  await testRunner.AndAsync("I select New Row button under Job Plans Tasks section", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table504 = new global::Reqnroll.Table(new string[] {
                            "Task Description"});
                table504.AddRow(new string[] {
                            "Creating Campaigns Jo Plan"});
#line 59
  await testRunner.AndAsync("I enter Task Description:", ((string)(null)), table504, "And ");
#line hidden
#line 62
  await testRunner.AndAsync("I open Select Value lookup of Qualifications field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 63
  await testRunner.AndAsync("I select yes dialog button of System Message", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 64
  await testRunner.AndAsync("I select New Row", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 65
  await testRunner.AndAsync("I open Select Value lookup of Qualification Requirements field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table505 = new global::Reqnroll.Table(new string[] {
                            "Qualification"});
                table505.AddRow(new string[] {
                            "TEST_CMS"});
#line 66
  await testRunner.AndAsync("I filter Qualification Requirements:", ((string)(null)), table505, "And ");
#line hidden
#line 69
  await testRunner.AndAsync("I select no. 1 record from Qualification Requirements table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 70
  await testRunner.AndAsync("I Press Ok dialog button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 71
  await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 72
  await testRunner.AndAsync("I set Qualification status ACTIVE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 73
  await testRunner.AndAsync("I click Ok", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 74
  await testRunner.AndAsync("I verify Job Plans status ACTIVE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 75
  await testRunner.AndAsync("I take screenshot of Creation of Campaigns work order Test Scenario two", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03) Creation of Campaigns in the Maximo System")]
        [NUnit.Framework.TestCaseAttribute("maxadmin", null)]
        public async global::System.Threading.Tasks.Task _03CreationOfCampaignsInTheMaximoSystem(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("03) Creation of Campaigns in the Maximo System", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 87
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 88
  await testRunner.GivenAsync("I sign as maxadmin", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 89
  await testRunner.AndAsync("I open application Campaigns (Tr)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 90
  await testRunner.AndAsync("I select New Campaign", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table506 = new global::Reqnroll.Table(new string[] {
                            "Campaign Description"});
                table506.AddRow(new string[] {
                            "Creating Campaigns Test"});
#line 91
  await testRunner.AndAsync("I enter Campaign Details:", ((string)(null)), table506, "And ");
#line hidden
#line 94
  await testRunner.AndAsync("I select long Description button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table507 = new global::Reqnroll.Table(new string[] {
                            "Long Description"});
                table507.AddRow(new string[] {
                            "Automation Test of Creating Campaigns Work Order"});
#line 95
  await testRunner.AndAsync("I enter Campaigns long Description:", ((string)(null)), table507, "And ");
#line hidden
#line 98
  await testRunner.AndAsync("I click button ok", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table508 = new global::Reqnroll.Table(new string[] {
                            "Campaign Reference"});
                table508.AddRow(new string[] {
                            "Campaigns Test"});
#line 99
  await testRunner.AndAsync("I enter Campaign Reference:", ((string)(null)), table508, "And ");
#line hidden
#line 102
  await testRunner.AndAsync("I open Select Value lookup of priority field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table509 = new global::Reqnroll.Table(new string[] {
                            "Priority"});
                table509.AddRow(new string[] {
                            "Next Exam"});
#line 103
  await testRunner.AndAsync("I filter table Priority:", ((string)(null)), table509, "And ");
#line hidden
#line 106
  await testRunner.AndAsync("I select no. 1 record from Priority table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 107
  await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 108
  await testRunner.AndAsync("I go to tab Work Package", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 109
  await testRunner.AndAsync("I click Select Asset List button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 110
  await testRunner.AndAsync("I select the Detail Menu of the asset and go to the Asset List (Tr)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table510 = new global::Reqnroll.Table(new string[] {
                            "Asset"});
                table510.AddRow(new string[] {
                            "387-2"});
#line 111
  await testRunner.AndAsync("I filter table Campaigns Asset:", ((string)(null)), table510, "And ");
#line hidden
#line 114
  await testRunner.AndAsync("I select no. 1 record from Campaigns Asset table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 115
  await testRunner.AndAsync("I select Return With Value option", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 116
  await testRunner.AndAsync("I select the Ok dialog button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 117
  await testRunner.AndAsync("I select no. 1 record from Work Package table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 118
  await testRunner.AndAsync("I select the Detail Menu of the Work Location and go to the Locations (Tr)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table511 = new global::Reqnroll.Table(new string[] {
                            "Location"});
                table511.AddRow(new string[] {
                            "DMOSA - LEVELLING CONTROL ROD - NO.1 BOGIE"});
#line 119
  await testRunner.AndAsync("I filter table Locations:", ((string)(null)), table511, "And ");
#line hidden
#line 122
  await testRunner.AndAsync("I select no. 1 record from Work Location table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 123
  await testRunner.AndAsync("I select Return With Value option", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 124
  await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 125
  await testRunner.AndAsync("I select the Detail Menu of the Job Plans and go to the Job Plans (Tr)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table512 = new global::Reqnroll.Table(new string[] {
                            "Job Plans"});
                table512.AddRow(new string[] {
                            "CMS_TEST40"});
#line 126
  await testRunner.AndAsync("I filter table Job Plans:", ((string)(null)), table512, "And ");
#line hidden
#line 129
  await testRunner.AndAsync("I select no. 1 record from Job Plans table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 130
  await testRunner.AndAsync("I select Return With Value option", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 131
  await testRunner.AndAsync("I select no. 2 record from Work Package table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 132
  await testRunner.AndAsync("I select the Detail Menu of the Job Plans and go to the Job Plans (Tr)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table513 = new global::Reqnroll.Table(new string[] {
                            "Job Plans"});
                table513.AddRow(new string[] {
                            "CMS_TEST40"});
#line 133
  await testRunner.AndAsync("I filter table Job Plans:", ((string)(null)), table513, "And ");
#line hidden
#line 136
  await testRunner.AndAsync("I select no. 1 record from Job Plans table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 137
  await testRunner.AndAsync("I select Return With Value option", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 138
  await testRunner.AndAsync("I select no. 3 record from Work Package table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 139
  await testRunner.AndAsync("I select the Detail Menu of the Job Plans and go to the Job Plans (Tr)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table514 = new global::Reqnroll.Table(new string[] {
                            "Job Plans"});
                table514.AddRow(new string[] {
                            "CMS_TEST40"});
#line 140
  await testRunner.AndAsync("I filter table Job Plans:", ((string)(null)), table514, "And ");
#line hidden
#line 143
  await testRunner.AndAsync("I select no. 1 record from Job Plans table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 144
  await testRunner.AndAsync("I select Return With Value option", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 145
  await testRunner.AndAsync("I Approved Campaign", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 146
  await testRunner.AndAsync("I press dialog ok button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 147
  await testRunner.AndAsync("I verify Campaign status", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 148
  await testRunner.AndAsync("I Generate Campaign work order", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 149
  await testRunner.AndAsync("I wait for generate work order to load", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 151
  await testRunner.AndAsync("I select Ok buttton of system message", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 152
  await testRunner.AndAsync("I verify work order generated numbers", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 153
  await testRunner.AndAsync("I take screenshot of Creation of Campaigns work order Test Scenario three", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion

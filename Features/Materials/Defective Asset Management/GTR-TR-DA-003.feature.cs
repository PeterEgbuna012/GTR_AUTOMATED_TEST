// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace GTR_AUTOMATED.Features.Materials.DefectiveAssetManagement
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("0.0.3 - Sending assets away on a Despatch record")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class _0_0_3_SendingAssetsAwayOnADespatchRecordFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/Materials/Defective Asset Management", "0.0.3 - Sending assets away on a Despatch record", @"Material needs to be sent away to a supplier for repair. This material may be covered by a Service Purchase Order or a Warranty Claim, or it could be despatched without any financial information as the repair requires a quote or it is assumed the asset will be repaired/replaced for free.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "GTR-TR-DA-003.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sending assets away on a Despatch record")]
        [NUnit.Framework.CategoryAttribute("Feature:0.0.3-SendingassetsawayonaDespatchrecord")]
        [NUnit.Framework.TestCaseAttribute("stores person hornsey", null)]
        public async global::System.Threading.Tasks.Task SendingAssetsAwayOnADespatchRecord(string role, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Feature:0.0.3-SendingassetsawayonaDespatchrecord"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Sending assets away on a Despatch record", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
    await testRunner.GivenAsync("I sign as stores person hornsey", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
    await testRunner.AndAsync("I select new MXRDESPATCH", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table265 = new global::Reqnroll.Table(new string[] {
                            "Despatch Description"});
                table265.AddRow(new string[] {
                            "Sending assets away on a Despatch record Test"});
#line 10
     await testRunner.AndAsync("I enter Despatch Details:", ((string)(null)), table265, "And ");
#line hidden
#line 13
    await testRunner.AndAsync("I choose Select Value from Detail Menu of Despatch location", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table266 = new global::Reqnroll.Table(new string[] {
                            "Despatch location"});
                table266.AddRow(new string[] {
                            "MAT-HE-DIRTY"});
#line 14
    await testRunner.AndAsync("I filter table Despatch location:", ((string)(null)), table266, "And ");
#line hidden
#line 17
      await testRunner.AndAsync("I select no. 1 record from Despatch location table record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table267 = new global::Reqnroll.Table(new string[] {
                            "Vendor Items"});
                table267.AddRow(new string[] {
                            "38"});
#line 18
     await testRunner.AndAsync("I enter Vendor data:", ((string)(null)), table267, "And ");
#line hidden
#line 21
    await testRunner.AndAsync("I choose Select Value from Detail Menu of Vendor Location", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table268 = new global::Reqnroll.Table(new string[] {
                            "Vendor location"});
                table268.AddRow(new string[] {
                            "MAT-VEND-BH"});
#line 22
    await testRunner.AndAsync("I filter table Vendor location:", ((string)(null)), table268, "And ");
#line hidden
#line 25
    await testRunner.AndAsync("I select no. 1 record from Vendor location table record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
    await testRunner.AndAsync("I choose Select Value from Detail Menu of Return location", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table269 = new global::Reqnroll.Table(new string[] {
                            "Return location"});
                table269.AddRow(new string[] {
                            "HE-Z-OVERHAUL"});
#line 27
    await testRunner.AndAsync("I filter table Return location:", ((string)(null)), table269, "And ");
#line hidden
#line 30
    await testRunner.AndAsync("I select no. 1 record from Return location table record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 31
    await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 32
    await testRunner.AndAsync("I go to Despatch Lines tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 33
    await testRunner.AndAsync("I select new row button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 34
    await testRunner.AndAsync("I choose select value from detail menu for asset field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table270 = new global::Reqnroll.Table(new string[] {
                            "Asset",
                            "Location"});
                table270.AddRow(new string[] {
                            "",
                            "MAT-HE-DIRTY"});
#line 35
    await testRunner.GivenAsync("I filter table Asset:", ((string)(null)), table270, "Given ");
#line hidden
#line 38
 await testRunner.AndAsync("I select no. 1 record from asset table record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 39
    await testRunner.AndAsync("I select change status", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 40
    await testRunner.AndAsync("I set (Radio) field to Despatched", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 41
    await testRunner.AndAsync("I click the OK dialog button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 42
    await testRunner.AndAsync("I take screenshot of DESPATCHED status", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 43
    await testRunner.AndAsync("I select action Run Report", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table271 = new global::Reqnroll.Table(new string[] {
                            "Report"});
                table271.AddRow(new string[] {
                            "Despatch Report"});
#line 44
     await testRunner.AndAsync("I filter Report:", ((string)(null)), table271, "And ");
#line hidden
#line 47
 await testRunner.AndAsync("I select no. 1 record from Despatch Report table record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 48
    await testRunner.AndAsync("I Submit Despatch Report", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 49
    await testRunner.AndAsync("I wait for page to load", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 50
    await testRunner.AndAsync("I take screenshot of Sending assets away on a Despatch record test", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion

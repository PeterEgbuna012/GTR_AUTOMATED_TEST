// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace GTR_AUTOMATED.Features.Materials.DefectiveAssetManagement
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("0.0.2 - Raising a Warranty Claim")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class _0_0_2_RaisingAWarrantyClaimFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/Materials/Defective Asset Management", "0.0.2 - Raising a Warranty Claim", "An Asset has failed within the Warranty coverage period, a claim needs to be subm" +
                "itted to the vendor", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "GTR-TR-DA-002.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Raising a Warranty Claim")]
        [NUnit.Framework.CategoryAttribute("RaisingaWarrantyClaim")]
        [NUnit.Framework.TestCaseAttribute("warranty manager", null)]
        public async global::System.Threading.Tasks.Task RaisingAWarrantyClaim(string role, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "RaisingaWarrantyClaim"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Raising a Warranty Claim", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
     await testRunner.GivenAsync("I sign as warranty manager", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
  await testRunner.AndAsync("I open application Warranty Claims (Tr)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 10
  await testRunner.AndAsync("I select create new clams button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table209 = new global::Reqnroll.Table(new string[] {
                            "Clams Description"});
                table209.AddRow(new string[] {
                            "Raising a Warranty Claim Test"});
#line 11
  await testRunner.AndAsync("I enter Clams Details:", ((string)(null)), table209, "And ");
#line hidden
#line 14
   await testRunner.AndAsync("I choose select value from detail menu of asset field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table210 = new global::Reqnroll.Table(new string[] {
                            "Asset"});
                table210.AddRow(new string[] {
                            "1000000"});
#line 15
   await testRunner.AndAsync("I filter table Asset:", ((string)(null)), table210, "And ");
#line hidden
#line 18
  await testRunner.AndAsync("I select no. 1 record from asset table record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 19
  await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
     await testRunner.AndAsync("I set (Radio) field to Submit Claim", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
     await testRunner.AndAsync("I Press dialog button OK", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
  await testRunner.AndAsync("I change clams status to Waiting on Approval (WAPPR)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
  await testRunner.AndAsync("I Press dialog button OK system message", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 24
  await testRunner.AndAsync("I go to clams Log tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
  await testRunner.AndAsync("I select the New Row button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table211 = new global::Reqnroll.Table(new string[] {
                            "Summary",
                            "Details"});
                table211.AddRow(new string[] {
                            "Raising a Warranty Claim Test",
                            "Raising a Warranty Claim Auto Test"});
#line 26
  await testRunner.AndAsync("I enter following claim logs:", ((string)(null)), table211, "And ");
#line hidden
#line 29
  await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 30
  await testRunner.AndAsync("I go to claim tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table212 = new global::Reqnroll.Table(new string[] {
                            "RMA Reference",
                            "Missed Peaks"});
                table212.AddRow(new string[] {
                            "TAUTO",
                            "100"});
#line 31
  await testRunner.AndAsync("I enter following claim data:", ((string)(null)), table212, "And ");
#line hidden
#line 34
  await testRunner.AndAsync("I choose select value from detail menu of contract field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table213 = new global::Reqnroll.Table(new string[] {
                            "Contract"});
                table213.AddRow(new string[] {
                            "BOM"});
#line 35
  await testRunner.AndAsync("I filter table contract:", ((string)(null)), table213, "And ");
#line hidden
#line 38
  await testRunner.AndAsync("I select no. 1 record from contract table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 39
  await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table214 = new global::Reqnroll.Table(new string[] {
                            "Cost",
                            "Claimed Amount"});
                table214.AddRow(new string[] {
                            "100",
                            "100"});
#line 40
   await testRunner.AndAsync("I enter claim data:", ((string)(null)), table214, "And ");
#line hidden
#line 43
  await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 44
  await testRunner.AndAsync("I select Approve claim", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 45
  await testRunner.AndAsync("I click dialog OK button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 46
  await testRunner.AndAsync("I verify claims status", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 47
  await testRunner.AndAsync("I take screenshot of Raising a Warranty Claim", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion

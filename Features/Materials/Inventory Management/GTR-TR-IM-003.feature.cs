// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace GTR_AUTOMATED.Features.Materials.InventoryManagement
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("0.0.3 - Issuing Consumable Materials")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class _0_0_3_IssuingConsumableMaterialsFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/Materials/Inventory Management", "0.0.3 - Issuing Consumable Materials", "A store person is required to issue consumable material. This might be to a Work " +
                "Order, a Fleet Location (lineside spares), or a Person (PPE).", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "GTR-TR-IM-003.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Issuing Consumable Materials")]
        [NUnit.Framework.CategoryAttribute("Feature:0.0.3-IssuingConsumableMaterials")]
        [NUnit.Framework.TestCaseAttribute("stores", null)]
        public async global::System.Threading.Tasks.Task IssuingConsumableMaterials(string role, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Feature:0.0.3-IssuingConsumableMaterials"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Issuing Consumable Materials", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
  await testRunner.GivenAsync("I sign as stores", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
  await testRunner.AndAsync("I open application Inventory Usage from Fav Menu", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table431 = new global::Reqnroll.Table(new string[] {
                            "Storeroom",
                            "Item"});
                table431.AddRow(new string[] {
                            "SL-VALUE",
                            "093/060987"});
#line 9
  await testRunner.AndAsync("I filter table storeroom:", ((string)(null)), table431, "And ");
#line hidden
#line 12
     await testRunner.AndAsync("I return to Maintainer Start Center", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 13
  await testRunner.AndAsync("I open application Inventory Usage from Fav Menu", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
  await testRunner.AndAsync("I select create New Inventory usage", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table432 = new global::Reqnroll.Table(new string[] {
                            "Asset Description"});
                table432.AddRow(new string[] {
                            "Issuing Consumable Materials"});
#line 15
  await testRunner.AndAsync("I enter asset description:", ((string)(null)), table432, "And ");
#line hidden
#line 18
   await testRunner.AndAsync("I choose Select Value from Detail Menu for Storeroom field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table433 = new global::Reqnroll.Table(new string[] {
                            "Storeroom"});
                table433.AddRow(new string[] {
                            "SL-VALUE"});
#line 19
   await testRunner.AndAsync("I filter table Storeroom:", ((string)(null)), table433, "And ");
#line hidden
#line 22
     await testRunner.AndAsync("I select no. 1 record from Storeroom table record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
  await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 24
  await testRunner.AndAsync("I select New Row button under the Usage Lines", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
  await testRunner.AndAsync("I choose Select Value from Detail Menu for Item field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table434 = new global::Reqnroll.Table(new string[] {
                            "Description",
                            "Item"});
                table434.AddRow(new string[] {
                            "Screw",
                            "093/060987"});
#line 26
  await testRunner.AndAsync("I filter Item table records:", ((string)(null)), table434, "And ");
#line hidden
#line 29
      await testRunner.AndAsync("I select no. 1 record from Item table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 30
   await testRunner.AndAsync("I choose Select Value from Detail Menu of Work Order Field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table435 = new global::Reqnroll.Table(new string[] {
                            "Work Order Description"});
                table435.AddRow(new string[] {
                            "Issue Rotating Assets to a Work Order"});
#line 31
   await testRunner.AndAsync("I filter work Order table:", ((string)(null)), table435, "And ");
#line hidden
#line 34
     await testRunner.AndAsync("I wait for Work order records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 35
     await testRunner.AndAsync("I select no. 1 from work Order table record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 36
  await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 37
  await testRunner.AndAsync("I select New Row button under the Usage Lines", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 38
  await testRunner.AndAsync("I choose Select Value from Detail Menu for Item field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table436 = new global::Reqnroll.Table(new string[] {
                            "Description",
                            "Item"});
                table436.AddRow(new string[] {
                            "Screw",
                            "093/060987"});
#line 39
  await testRunner.AndAsync("I filter Item table records:", ((string)(null)), table436, "And ");
#line hidden
#line 42
     await testRunner.AndAsync("I select no. 1 record from Item table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 43
  await testRunner.AndAsync("I choose Select Value from Detail Menu of location field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table437 = new global::Reqnroll.Table(new string[] {
                            "location"});
                table437.AddRow(new string[] {
                            "387201"});
#line 44
  await testRunner.AndAsync("I filter location table:", ((string)(null)), table437, "And ");
#line hidden
#line 47
     await testRunner.AndAsync("I select no. 1 record from location table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 48
     await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 49
  await testRunner.AndAsync("I select view Item details", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 50
  await testRunner.AndAsync("I select New Row button under the Usage Line", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 51
  await testRunner.AndAsync("I choose Select Value from Detail Menu for Item field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table438 = new global::Reqnroll.Table(new string[] {
                            "Description",
                            "Item"});
                table438.AddRow(new string[] {
                            "Screw",
                            "093/060987"});
#line 52
  await testRunner.AndAsync("I filter Item table records:", ((string)(null)), table438, "And ");
#line hidden
#line 55
     await testRunner.AndAsync("I select no. 1 record from Item table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 56
  await testRunner.AndAsync("I choose Select Value from Detail Menu of location field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table439 = new global::Reqnroll.Table(new string[] {
                            "locations",
                            "Type"});
                table439.AddRow(new string[] {
                            "MAT-HE-PERSON",
                            "Person"});
#line 57
  await testRunner.AndAsync("I filter locations table records:", ((string)(null)), table439, "And ");
#line hidden
#line 60
     await testRunner.AndAsync("I select no. 1 record from location table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 61
  await testRunner.AndAsync("I open Select Value lookup of Issue To field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table440 = new global::Reqnroll.Table(new string[] {
                            "Issue To"});
                table440.AddRow(new string[] {
                            "GHENDLEY"});
#line 62
   await testRunner.AndAsync("I filter Issue To table:", ((string)(null)), table440, "And ");
#line hidden
#line 65
     await testRunner.AndAsync("I select no. 1 record from person records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 66
     await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 67
  await testRunner.AndAsync("I select Change status", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 68
  await testRunner.AndAsync("I select Complete from dropdown menu option of New Status field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 69
  await testRunner.AndAsync("I press the dialog button OK", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 70
  await testRunner.AndAsync("I verify status changed to COMPLETE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 71
  await testRunner.AndAsync("I take screenshot of Issuing Consumable Materials test", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion

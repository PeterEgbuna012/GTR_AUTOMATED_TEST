// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace GTR_AUTOMATED.Features.Materials.InventoryManagement
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("0.0.2 - Issue Rotating Assets to a Work Order")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class _0_0_2_IssueRotatingAssetsToAWorkOrderFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/Materials/Inventory Management", "0.0.2 - Issue Rotating Assets to a Work Order", "As a Stores Person Issue Rotating Items to a Work Order, specifying the unique as" +
                "sets that have been issued.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "GTR-TR-IM-002.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01) Raising a Fault")]
        [NUnit.Framework.CategoryAttribute("Feature:0.0.2-IssueRotatingAssetstoaWorkOrder")]
        [NUnit.Framework.TestCaseAttribute("Fault Analyst", null)]
        public async global::System.Threading.Tasks.Task _01RaisingAFault(string role, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Feature:0.0.2-IssueRotatingAssetstoaWorkOrder"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("01) Raising a Fault", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
    await testRunner.GivenAsync("I sign as Fault Analyst", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
    await testRunner.WhenAsync("I open application Work Orders, Fault Reporting (BRDA)", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
    await testRunner.AndAsync("I create new record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 10
    await testRunner.AndAsync("I choose Select Value from Detail Menu of Location field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 11
    await testRunner.AndAsync("I select no. 3 record from Location table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
    await testRunner.AndAsync("I open Select Value lookup for Failure Group field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 13
    await testRunner.AndAsync("I select no. 3 record from Failure Group table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
    await testRunner.AndAsync("I open Select Value lookup for Failure Code field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
    await testRunner.AndAsync("I select no. 1 record from Failure Code table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 16
    await testRunner.AndAsync("I open Select Value lookup for Problem Code field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
    await testRunner.AndAsync("I select no. 1 record from Problem Code table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
    await testRunner.AndAsync("I open Select Value lookup for Repair Facility field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 19
    await testRunner.AndAsync("I select no. 1 record from Repair Facility table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
    await testRunner.AndAsync("I open Select Value lookup for Reported Priority", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
    await testRunner.AndAsync("I select no. 1 record from Reported Priority table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table320 = new global::Reqnroll.Table(new string[] {
                            "Headcode"});
                table320.AddRow(new string[] {
                            "TAUTO"});
#line 22
    await testRunner.AndAsync("I enter following data to Headcode:", ((string)(null)), table320, "And ");
#line hidden
                global::Reqnroll.Table table321 = new global::Reqnroll.Table(new string[] {
                            "Summary",
                            "Details"});
                table321.AddRow(new string[] {
                            "Issue Rotating Assets to a Work Order",
                            "Issue Rotating Assets to a Work Order Test"});
#line 25
    await testRunner.AndAsync("I enter following data:", ((string)(null)), table321, "And ");
#line hidden
#line 28
    await testRunner.AndAsync("I route the workflow", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
    await testRunner.AndAsync("I press dialog button of Show Duplicate Tickets", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 31
    await testRunner.AndAsync("I route the workflow", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 32
    await testRunner.AndAsync("I set (Radio) field to Raise a Depot Work Order", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 33
    await testRunner.ThenAsync("I press dialog button OK", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 34
    await testRunner.WhenAsync("I go to Related Records tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 35
    await testRunner.AndAsync("I view Related Work Order", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 36
    await testRunner.ThenAsync("field Status has value WAIT-REV", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 37
    await testRunner.ThenAsync("Relationship field has value FOLLOWUP", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 38
    await testRunner.AndAsync("I take screenshot of Fault Work Order", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02) Accepting An EM Work Order into the Work Bank")]
        [NUnit.Framework.TestCaseAttribute("teamlead", null)]
        public async global::System.Threading.Tasks.Task _02AcceptingAnEMWorkOrderIntoTheWorkBank(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("02) Accepting An EM Work Order into the Work Bank", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
      this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 46
  await testRunner.GivenAsync("I sign as teamlead", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 47
  await testRunner.AndAsync("I open application Work Order Tracking BRDA from Fav Menu", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table322 = new global::Reqnroll.Table(new string[] {
                            "Description",
                            "Status",
                            "Work Type"});
                table322.AddRow(new string[] {
                            "Issue Rotating Assets to a Work Order",
                            "=WAIT-REV",
                            "=EM"});
#line 48
     await testRunner.WhenAsync("I filter table EM:", ((string)(null)), table322, "When ");
#line hidden
#line 51
    await testRunner.AndAsync("I select no. 1 record from EM table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 52
    await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 53
 await testRunner.AndAsync("I set (Radio) Box to Accept this Work Order into the Work Bank", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 54
 await testRunner.AndAsync("I press OK dialog button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 55
 await testRunner.AndAsync("work order Status field has value REVIEWED", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 56
 await testRunner.AndAsync("I take screenshot of Completing an EM Work Order for Review scenario two", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03)  Assigning an EM Work Orderr")]
        [NUnit.Framework.TestCaseAttribute("teamlead", null)]
        public async global::System.Threading.Tasks.Task _03AssigningAnEMWorkOrderr(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("03)  Assigning an EM Work Orderr", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 67
 await testRunner.GivenAsync("I sign as teamlead", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 68
   await testRunner.AndAsync("I open application Work Order Tracking BRDA from Fav Menu", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table323 = new global::Reqnroll.Table(new string[] {
                            "Description",
                            "Status",
                            "Work Type"});
                table323.AddRow(new string[] {
                            "Issue Rotating Assets to a Work Order",
                            "=REVIEWED",
                            "=EM"});
#line 69
      await testRunner.WhenAsync("I filter table EM:", ((string)(null)), table323, "When ");
#line hidden
#line 72
     await testRunner.AndAsync("I select no. 1 record from EM table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 73
     await testRunner.AndAsync("I go to Assignment tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 74
  await testRunner.AndAsync("I press add new row under Assignments tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 75
  await testRunner.AndAsync("I select Value lookup for Labor field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table324 = new global::Reqnroll.Table(new string[] {
                            "labor"});
                table324.AddRow(new string[] {
                            "ABRACE"});
#line 76
     await testRunner.AndAsync("I filter table labor:", ((string)(null)), table324, "And ");
#line hidden
#line 79
  await testRunner.AndAsync("I select no.2 from labor table record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 80
  await testRunner.AndAsync("I pree Ok dialog system message button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 81
  await testRunner.AndAsync("I save", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 82
  await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 83
  await testRunner.AndAsync("I set (Radio) Box to Send Work For Execution", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 84
  await testRunner.AndAsync("I click OK dialog button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 85
  await testRunner.AndAsync("I verify Status field has value SCHEDULED", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 86
  await testRunner.AndAsync("I take screenshot of Completing an EM Work Order for Review scenario three", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04) Completing an EM Work Order for Review")]
        [NUnit.Framework.TestCaseAttribute("Maintainer", null)]
        public async global::System.Threading.Tasks.Task _04CompletingAnEMWorkOrderForReview(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("04) Completing an EM Work Order for Review", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 93
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 94
 await testRunner.GivenAsync("I sign as Maintainer", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 95
 await testRunner.AndAsync("I open application Quick Work Order BRDA from Fav Menu", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table325 = new global::Reqnroll.Table(new string[] {
                            "Description",
                            "Status",
                            "Work Type"});
                table325.AddRow(new string[] {
                            "Issue Rotating Assets to a Work Order",
                            "=SCHEDULED",
                            "=EM"});
#line 96
    await testRunner.WhenAsync("I filter table Quick Work Order:", ((string)(null)), table325, "When ");
#line hidden
#line 99
    await testRunner.AndAsync("I select no. 1 record from EM table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 100
 await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 101
 await testRunner.AndAsync("I set (Radio) Box to Start Work order", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 102
 await testRunner.AndAsync("I press dialog Ok", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 103
 await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 104
 await testRunner.AndAsync("I set (Radio) Box to Complete Work Assignment", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 105
 await testRunner.AndAsync("I press dialog Ok", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 106
 await testRunner.AndAsync("I press dialog button close", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 107
 await testRunner.AndAsync("I go to labor tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 108
 await testRunner.AndAsync("I press add new row button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 109
 await testRunner.AndAsync("I choose Select Value from Detail Menu labor field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table326 = new global::Reqnroll.Table(new string[] {
                            "Labor"});
                table326.AddRow(new string[] {
                            "ABRACE"});
#line 110
     await testRunner.AndAsync("I filter table Record labor:", ((string)(null)), table326, "And ");
#line hidden
#line 113
 await testRunner.AndAsync("I select no. 2 record from labor table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 114
 await testRunner.AndAsync("I set labor Start and End time", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 115
 await testRunner.AndAsync("I save", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 116
 await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 117
 await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 118
 await testRunner.AndAsync("I set (Radio) Box to Complete Work Assignment", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 119
 await testRunner.AndAsync("I press dialog Ok", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 120
    await testRunner.AndAsync("I press dialog button close", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 121
    await testRunner.AndAsync("I go to Failure Reporting Tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 122
    await testRunner.AndAsync("I press the button Select Failure Codes", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 126
 await testRunner.AndAsync("I select Faliure Informations", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 127
 await testRunner.AndAsync("I go to Log Tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 128
    await testRunner.AndAsync("I add new row Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table327 = new global::Reqnroll.Table(new string[] {
                            "Summary",
                            "Details"});
                table327.AddRow(new string[] {
                            "Issue Rotating Assets to a Work Order",
                            "Issue Rotating Assets to a Work Order Test"});
#line 129
    await testRunner.AndAsync("I enter following:", ((string)(null)), table327, "And ");
#line hidden
#line 132
    await testRunner.ThenAsync("the record is saved successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 133
    await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 134
    await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 135
    await testRunner.AndAsync("I set (Radio) Box to Complete Work Assignment", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 136
    await testRunner.AndAsync("I Click dialog Ok button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 137
    await testRunner.AndAsync("I Status field has value COMP-WREV", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 138
    await testRunner.AndAsync("I take screenshot of Completing an EM Work Order for Review test scenario four", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("05) Issue Rotating Assets to a Work Order")]
        [NUnit.Framework.TestCaseAttribute("store", null)]
        public async global::System.Threading.Tasks.Task _05IssueRotatingAssetsToAWorkOrder(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("05) Issue Rotating Assets to a Work Order", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 148
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 149
      await testRunner.GivenAsync("I sign as stores", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 150
   await testRunner.AndAsync("I open application Inventory Usage from Fav Menu", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 151
   await testRunner.AndAsync("I select create New Inventory usage", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table328 = new global::Reqnroll.Table(new string[] {
                            "Asset Description"});
                table328.AddRow(new string[] {
                            "Issue Rotating Assets to a Work Order"});
#line 152
   await testRunner.AndAsync("I enter asset description:", ((string)(null)), table328, "And ");
#line hidden
#line 155
   await testRunner.AndAsync("I choose Select Value from Detail Menu for Storeroom field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table329 = new global::Reqnroll.Table(new string[] {
                            "Storeroom"});
                table329.AddRow(new string[] {
                            "SL-Z-VALUE"});
#line 156
   await testRunner.AndAsync("I filter table Storeroom:", ((string)(null)), table329, "And ");
#line hidden
#line 159
      await testRunner.AndAsync("I select no. 1 record from Storeroom table record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 160
   await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 161
   await testRunner.AndAsync("I select New Row button under the Usage Lines", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 162
   await testRunner.AndAsync("I set Usage Type field to ISSUE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 163
   await testRunner.AndAsync("I choose Select Value from Detail Menu for Item field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table330 = new global::Reqnroll.Table(new string[] {
                            "Item"});
                table330.AddRow(new string[] {
                            "093/051329"});
#line 164
   await testRunner.AndAsync("I filter table Item:", ((string)(null)), table330, "And ");
#line hidden
#line 167
      await testRunner.AndAsync("I select no. 1 record from Item table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 168
   await testRunner.AndAsync("I choose Select Value from Detail Menu of Work Order Field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table331 = new global::Reqnroll.Table(new string[] {
                            "Work Order Description"});
                table331.AddRow(new string[] {
                            "Issue Rotating Assets to a Work Order"});
#line 169
   await testRunner.AndAsync("I filter work Order table:", ((string)(null)), table331, "And ");
#line hidden
#line 172
      await testRunner.AndAsync("I wait for Work order records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 173
      await testRunner.AndAsync("I select no. 1 from work Order table record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 174
   await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 175
   await testRunner.AndAsync("I select Change status", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 176
   await testRunner.AndAsync("I select Complete from dropdown menu option of New Status field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 177
   await testRunner.AndAsync("I set (Radio) field to Use the default stage bin for each inventory item", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 178
   await testRunner.AndAsync("I press the dialog button OK", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 179
   await testRunner.AndAsync("I select New Row button under Select Rotating Assets Section", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 180
   await testRunner.AndAsync("I open Select Value lookup for Asset field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 181
   await testRunner.AndAsync("I select no. 1 record from Rotating Asset table record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 183
   await testRunner.AndAsync("I click the dialog button OK", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 184
   await testRunner.AndAsync("Rotating Assets Status field has value COMPLETE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 185
   await testRunner.AndAsync("I open application Assets", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table332 = new global::Reqnroll.Table(new string[] {
                            "Asset"});
                table332.AddRow(new string[] {
                            "MAT-ASS-2726"});
#line 186
   await testRunner.AndAsync("I filter Asset table:", ((string)(null)), table332, "And ");
#line hidden
#line 189
   await testRunner.AndAsync("I select no. 1 record from asset table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 190
   await testRunner.AndAsync("I take screenshot of  Issue Rotating Assets to a Work Order test", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 191
   await testRunner.AndAsync("I return to Maintainer Start Center", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion

// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace GTR_AUTOMATED.Features.Materials.ExpeditingProcess
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("0.0.3 - Raising a Purchase Requisition - Stocked Item")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class _0_0_3_RaisingAPurchaseRequisition_StockedItemFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/Materials/Expediting Process", "0.0.3 - Raising a Purchase Requisition - Stocked Item", "There is demand in the storeroom that has not been met by the automatic reorder p" +
                "rocess (either not on reorder or not depleted to reorder point). As such an ad-h" +
                "oc order is required. The item is under contract price and so no carriage charge" +
                " is required.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "GTR-UAT-EXP-003.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Raising a Purchase Requisition - Stocked Item")]
        [NUnit.Framework.CategoryAttribute("Feature:0.0.3-RaisingaPurchaseRequisition-StockedItem")]
        [NUnit.Framework.TestCaseAttribute("materials supply chain support", null)]
        public async global::System.Threading.Tasks.Task RaisingAPurchaseRequisition_StockedItem(string role, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Feature:0.0.3-RaisingaPurchaseRequisition-StockedItem"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Raising a Purchase Requisition - Stocked Item", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
 await testRunner.GivenAsync("I sign as materials supply chain support", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
 await testRunner.AndAsync("I go to Supply Chain Support Tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 10
 await testRunner.AndAsync("I select New Purchase Requisition", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table234 = new global::Reqnroll.Table(new string[] {
                            "Purchase Requisition"});
                table234.AddRow(new string[] {
                            "Raising a Purchase Requisition - Stocked Item Test"});
#line 11
 await testRunner.AndAsync("I enter following Purchase Requisition:", ((string)(null)), table234, "And ");
#line hidden
#line 14
 await testRunner.AndAsync("I set Required Date", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
 await testRunner.AndAsync("I choose Select Value from Detail Menu of Company Field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table235 = new global::Reqnroll.Table(new string[] {
                            "Description"});
                table235.AddRow(new string[] {
                            "BUCK & HICKMAN (WEST THURROCK)"});
#line 16
 await testRunner.AndAsync("I filter table Company Field:", ((string)(null)), table235, "And ");
#line hidden
#line 19
 await testRunner.AndAsync("I select no. 1 record from Company table record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
 await testRunner.AndAsync("I select value lookup of Contact field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
 await testRunner.AndAsync("I select no. 1 record from Contact table record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
 await testRunner.AndAsync("I go to PR Lines tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
    await testRunner.AndAsync("I select Vendor Items button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table236 = new global::Reqnroll.Table(new string[] {
                            "Vendor Items"});
                table236.AddRow(new string[] {
                            "039/140100"});
#line 24
    await testRunner.AndAsync("I filter table Vendor Items:", ((string)(null)), table236, "And ");
#line hidden
#line 27
    await testRunner.AndAsync("I select no. 1 record from Vendor Items table record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 28
    await testRunner.AndAsync("I press dialog OK button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
   await testRunner.AndAsync("I choose Select Value from Detail Menu of Storeroom", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table237 = new global::Reqnroll.Table(new string[] {
                            "Storeroom"});
                table237.AddRow(new string[] {
                            "HE-VALUE"});
#line 30
 await testRunner.AndAsync("I filter table Storeroom:", ((string)(null)), table237, "And ");
#line hidden
#line 33
    await testRunner.AndAsync("I select no. 1 record from Storeroom table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table238 = new global::Reqnroll.Table(new string[] {
                            "GL Debit Account"});
                table238.AddRow(new string[] {
                            "00000-00000-0000"});
#line 34
 await testRunner.AndAsync("I enter GL Debit Account:", ((string)(null)), table238, "And ");
#line hidden
#line 37
 await testRunner.AndAsync("I select view PR details", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table239 = new global::Reqnroll.Table(new string[] {
                            "Conversion Factor"});
                table239.AddRow(new string[] {
                            "4"});
#line 38
 await testRunner.AndAsync("I enter  Conversion Factor:", ((string)(null)), table239, "And ");
#line hidden
#line 41
    await testRunner.AndAsync("I Select Value from Detail Menu of Storeroom", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 42
    await testRunner.AndAsync("I select no. 1 record from Storeroom table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 43
    await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 44
 await testRunner.AndAsync("I set (Radio) Allow Expediting Email True", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 45
 await testRunner.AndAsync("I Verify Estimated Due Date is set to 15 days", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 46
 await testRunner.AndAsync("I Verify Vendor Due Date is set plus 7 days", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 47
 await testRunner.AndAsync("I go to Ship To Bill To tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 48
 await testRunner.AndAsync("I Verify the Ship To address", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 49
 await testRunner.AndAsync("I Verify the Bill To address", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 50
 await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 51
 await testRunner.AndAsync("I set (Radio) field to Submit Purchase Request", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 52
 await testRunner.AndAsync("I press ok manual input dialog button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 53
 await testRunner.AndAsync("I close", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 54
 await testRunner.AndAsync("I take screenshot of Raising a Purchase Requisition - Stocked Item Test", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion

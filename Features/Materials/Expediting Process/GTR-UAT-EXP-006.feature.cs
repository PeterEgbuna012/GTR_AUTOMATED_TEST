// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace GTR_AUTOMATED.Features.Materials.ExpeditingProcess
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("0.0.6 - Approving a PR - Non-stocked Item")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class _0_0_6_ApprovingAPR_Non_StockedItemFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/Materials/Expediting Process", "0.0.6 - Approving a PR - Non-stocked Item", "PRs to review - non-intervention", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "GTR-UAT-EXP-006.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01) Raising a Purchase Requisition - Non-stocked Item")]
        [NUnit.Framework.CategoryAttribute("Feature:0.0.6-ApprovingaPR-Non-stockedItem")]
        [NUnit.Framework.TestCaseAttribute("materials supply chain support", null)]
        public async global::System.Threading.Tasks.Task _01RaisingAPurchaseRequisition_Non_StockedItem(string role, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Feature:0.0.6-ApprovingaPR-Non-stockedItem"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("01) Raising a Purchase Requisition - Non-stocked Item", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
  await testRunner.GivenAsync("I sign as materials supply chain support", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
  await testRunner.AndAsync("I go to Supply Chain Support Tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 10
  await testRunner.AndAsync("I select New Purchase Requisition", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table404 = new global::Reqnroll.Table(new string[] {
                            "Purchase Requisition"});
                table404.AddRow(new string[] {
                            "Approving a PR Non stocked Item Test"});
#line 11
   await testRunner.AndAsync("I enter following Purchase Requisition:", ((string)(null)), table404, "And ");
#line hidden
#line 14
   await testRunner.AndAsync("I enter Required Date", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
  await testRunner.AndAsync("I choose Select Value from Detail Menu of Company Field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table405 = new global::Reqnroll.Table(new string[] {
                            "Description"});
                table405.AddRow(new string[] {
                            "BUCK & HICKMAN (WEST THURROCK)"});
#line 16
  await testRunner.AndAsync("I filter table Company Field:", ((string)(null)), table405, "And ");
#line hidden
#line 19
  await testRunner.AndAsync("I select no. 1 record from Company table record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
  await testRunner.AndAsync("I select value lookup of Contact field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
  await testRunner.AndAsync("I select no. 1 record from Contact table record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
  await testRunner.AndAsync("I go to PR Lines tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
  await testRunner.AndAsync("I add new row under PR Lines tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 24
  await testRunner.AndAsync("I select Material from Line Type dropdown options", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table406 = new global::Reqnroll.Table(new string[] {
                            "Material Description",
                            "Line Cost"});
                table406.AddRow(new string[] {
                            "NON-STOCKED TEST",
                            "100"});
#line 25
  await testRunner.AndAsync("I enter following Material Details:", ((string)(null)), table406, "And ");
#line hidden
#line 28
  await testRunner.AndAsync("I open Select Value lookup for Order Unit field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
  await testRunner.AndAsync("I select no. 1 record from Order Unit table record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 30
  await testRunner.AndAsync("I choose Go To Work Order tacking (BRDA) from Detail Menu of Work Order tacking f" +
                        "ield", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table407 = new global::Reqnroll.Table(new string[] {
                            "Description",
                            "Status"});
                table407.AddRow(new string[] {
                            "CREATING A FIFI CM WO",
                            "=COMP-WREV"});
#line 31
  await testRunner.AndAsync("I filter table CM Work Order:", ((string)(null)), table407, "And ");
#line hidden
#line 34
  await testRunner.AndAsync("I select no. 1 record from CM Work Order table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 35
  await testRunner.AndAsync("I select return with value button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 36
  await testRunner.AndAsync("I go to Ship To Bill To tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 37
  await testRunner.AndAsync("I open Select Value lookup for Ship To field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table408 = new global::Reqnroll.Table(new string[] {
                            "Ship To"});
                table408.AddRow(new string[] {
                            "GTR-HE"});
#line 38
  await testRunner.AndAsync("I filter table Ship To:", ((string)(null)), table408, "And ");
#line hidden
#line 41
  await testRunner.AndAsync("I select no. 1 record from Ship To table record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 42
  await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 43
  await testRunner.AndAsync("I go to PR Lines tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 44
  await testRunner.AndAsync("I Verify Estimated Due Date is set to 14 days", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 45
  await testRunner.AndAsync("I Verify Vendor Due Date is set plus 7 days", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 46
  await testRunner.AndAsync("I go to Ship To Bill To tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 47
  await testRunner.AndAsync("I Verify the Ship To address", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 48
  await testRunner.AndAsync("I Verify the Bill To address", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 49
  await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 50
  await testRunner.AndAsync("I set (Radio) field to Submit Purchase Request", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 51
  await testRunner.AndAsync("I press ok manual input dialog button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 52
  await testRunner.AndAsync("I close", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 53
  await testRunner.AndAsync("I take screenshot of Approving a PR - Non-stocked Item Test Scenario one", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02) Approving a PR -  Non-stocked Item")]
        [NUnit.Framework.TestCaseAttribute("materials controller", null)]
        public async global::System.Threading.Tasks.Task _02ApprovingAPR_Non_StockedItem(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("02) Approving a PR -  Non-stocked Item", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 62
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 63
 await testRunner.GivenAsync("I sign as materials controller", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table409 = new global::Reqnroll.Table(new string[] {
                            "Purchase Requisition"});
                table409.AddRow(new string[] {
                            "Approving a PR Non stocked Item Test"});
#line 64
  await testRunner.AndAsync("I filter Portlet table Purchase Requisition:", ((string)(null)), table409, "And ");
#line hidden
#line 67
     await testRunner.AndAsync("I select no. 1 record from Purchase Requisition Portlet table record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 68
  await testRunner.AndAsync("I go to PR Lines tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 69
 await testRunner.AndAsync("I select view PR details", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table410 = new global::Reqnroll.Table(new string[] {
                            "Quantity"});
                table410.AddRow(new string[] {
                            "10"});
#line 70
 await testRunner.AndAsync("I enter quantity:", ((string)(null)), table410, "And ");
#line hidden
#line 73
 await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 75
 await testRunner.AndAsync("I go to Work Log tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 76
 await testRunner.AndAsync("I select New Row button under Work Log", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table411 = new global::Reqnroll.Table(new string[] {
                            "Summary",
                            "Details"});
                table411.AddRow(new string[] {
                            "Non stocked Auto Test",
                            "Approving a PR - Stocked Item Auto Test"});
#line 77
 await testRunner.AndAsync("I enter following Work Log data:", ((string)(null)), table411, "And ");
#line hidden
#line 80
 await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 81
 await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 82
 await testRunner.AndAsync("I set (Radio) field to Approve for £3k limit", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 83
 await testRunner.AndAsync("I press dialog Ok Complete Workflow assignment button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 84
 await testRunner.AndAsync("I press dialog Ok system message", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 85
 await testRunner.AndAsync("I open application Purchase Orders (Tr)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table412 = new global::Reqnroll.Table(new string[] {
                            "Purchase Orders",
                            "Status"});
                table412.AddRow(new string[] {
                            "Approving a PR - Stocked Item Test",
                            "=APPR"});
#line 86
 await testRunner.AndAsync("I filter table Purchase Orders (Tr):", ((string)(null)), table412, "And ");
#line hidden
#line 89
 await testRunner.AndAsync("I select no. 1 record from Purchase Orders table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 90
 await testRunner.AndAsync("I verify PO status", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 91
 await testRunner.AndAsync("I go to tab PO Lines", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 92
 await testRunner.AndAsync("I select view PO details", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 93
 await testRunner.AndAsync("I Verify PO Estimated Due Date is set to 15 days", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 94
 await testRunner.AndAsync("I Verify PO Vendor Due Date is set plus 7 days", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 95
 await testRunner.AndAsync("I Amend the Vendor Due Date", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 96
 await testRunner.AndAsync("I go to Work Log tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 97
 await testRunner.AndAsync("I add new row under Work Log tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table413 = new global::Reqnroll.Table(new string[] {
                            "Summary",
                            "Details"});
                table413.AddRow(new string[] {
                            "Non stocked Auto Test",
                            "Approving a PR Non stocked Item Test"});
#line 98
 await testRunner.AndAsync("I enter following PO Work Log data:", ((string)(null)), table413, "And ");
#line hidden
#line 101
 await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 102
 await testRunner.AndAsync("I take screenshot of Approving a PR - Non-stocked Item Test scenario two", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion

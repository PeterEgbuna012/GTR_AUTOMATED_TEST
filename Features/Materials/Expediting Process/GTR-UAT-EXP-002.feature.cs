// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace GTR_AUTOMATED.Features.Materials.ExpeditingProcess
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("0.0.2 - Automatic Email to Supplier")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class _0_0_2_AutomaticEmailToSupplierFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/Materials/Expediting Process", "0.0.2 - Automatic Email to Supplier", "The system will automatically send an email to the Supplier when an item on a PO " +
                "is 1 day overdue.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "GTR-UAT-EXP-002.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01) Automatic Email to Supplier")]
        [NUnit.Framework.CategoryAttribute("Feature:0.0.2-AutomaticEmailtoSupplier")]
        [NUnit.Framework.TestCaseAttribute("maximo administrator", null)]
        public async global::System.Threading.Tasks.Task _01AutomaticEmailToSupplier(string role, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Feature:0.0.2-AutomaticEmailtoSupplier"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("01) Automatic Email to Supplier", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
   await testRunner.GivenAsync("I sign as maximo administrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
   await testRunner.AndAsync("I open application Business Rules (BRDB)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table275 = new global::Reqnroll.Table(new string[] {
                            "Business Rules"});
                table275.AddRow(new string[] {
                            "MXRSUPPLIERCONTACT"});
#line 9
   await testRunner.AndAsync("I filter table Business Rules (BRDB):", ((string)(null)), table275, "And ");
#line hidden
#line 12
   await testRunner.AndAsync("I select no. 1 record from Business Rules table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table276 = new global::Reqnroll.Table(new string[] {
                            "Application"});
                table276.AddRow(new string[] {
                            "Escalations"});
#line 13
   await testRunner.AndAsync("I filter Application Search field:", ((string)(null)), table276, "And ");
#line hidden
#line 16
   await testRunner.AndAsync("I select Application Escalations", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table277 = new global::Reqnroll.Table(new string[] {
                            "Escalations"});
                table277.AddRow(new string[] {
                            "MXRORDEROVERDUE"});
#line 17
   await testRunner.AndAsync("I filter table Escalations:", ((string)(null)), table277, "And ");
#line hidden
#line 20
   await testRunner.AndAsync("I select no. 1 record from Escalations table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
   await testRunner.AndAsync("I set escalations active", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
   await testRunner.AndAsync("I go to notifications tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
   await testRunner.AndAsync("I choose Go To Communcation Templates from Detail Menu of Template field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 24
   await testRunner.AndAsync("I go to Recipients tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
   await testRunner.AndAsync("I select New Row button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table278 = new global::Reqnroll.Table(new string[] {
                            "Email"});
                table278.AddRow(new string[] {
                            "peter.egbuna@arcadis.com"});
#line 26
   await testRunner.AndAsync("I enter following Email:", ((string)(null)), table278, "And ");
#line hidden
#line 29
   await testRunner.AndAsync("I set (Radio) field to active", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 30
   await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 31
   await testRunner.AndAsync("I return", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 32
   await testRunner.AndAsync("I select value lookup of Schedule field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table279 = new global::Reqnroll.Table(new string[] {
                            "Schedule"});
                table279.AddRow(new string[] {
                            "2"});
#line 33
    await testRunner.AndAsync("I enter following Schedule:", ((string)(null)), table279, "And ");
#line hidden
#line 36
   await testRunner.AndAsync("I press the dialog button ok", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 37
   await testRunner.AndAsync("I set escalations active", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 38
   await testRunner.AndAsync("I select view details", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 39
   await testRunner.AndAsync("I review sent email", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 40
   await testRunner.AndAsync("I take screenshot of Automatic Email to Supplier Test Scenario one", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 41
   await testRunner.ThenAsync("I return to Maintainer Start Center", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02) Delete Automatic Email to Supplier")]
        [NUnit.Framework.TestCaseAttribute("maximo administrator", null)]
        public async global::System.Threading.Tasks.Task _02DeleteAutomaticEmailToSupplier(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("02) Delete Automatic Email to Supplier", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 50
   await testRunner.GivenAsync("I sign as maximo administrator", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 51
   await testRunner.AndAsync("I open application Business Rules (BRDB)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table280 = new global::Reqnroll.Table(new string[] {
                            "Business Rules"});
                table280.AddRow(new string[] {
                            "MXRSUPPLIERCONTACT"});
#line 52
   await testRunner.AndAsync("I filter table Business Rules (BRDB):", ((string)(null)), table280, "And ");
#line hidden
#line 55
   await testRunner.AndAsync("I select no. 1 record from Business Rules table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table281 = new global::Reqnroll.Table(new string[] {
                            "Application"});
                table281.AddRow(new string[] {
                            "Escalations"});
#line 56
   await testRunner.AndAsync("I filter Application Search field:", ((string)(null)), table281, "And ");
#line hidden
#line 59
   await testRunner.AndAsync("I select Application Escalations", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table282 = new global::Reqnroll.Table(new string[] {
                            "Escalations"});
                table282.AddRow(new string[] {
                            "MXRORDEROVERDUE"});
#line 60
    await testRunner.AndAsync("I filter table Escalations:", ((string)(null)), table282, "And ");
#line hidden
#line 63
   await testRunner.AndAsync("I select no. 1 record from Escalations table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 64
   await testRunner.AndAsync("I set escalations active", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 65
   await testRunner.AndAsync("I go to notifications tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 66
   await testRunner.AndAsync("I choose Go To Communcation Templates from Detail Menu of Template field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 67
   await testRunner.AndAsync("I go to Recipients tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 68
   await testRunner.AndAsync("I select show communcation template menu button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table283 = new global::Reqnroll.Table(new string[] {
                            "Email"});
                table283.AddRow(new string[] {
                            "peter.egbuna@arcadis.com"});
#line 69
   await testRunner.AndAsync("I filter table Email:", ((string)(null)), table283, "And ");
#line hidden
#line 72
   await testRunner.AndAsync("I delete email record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 73
   await testRunner.AndAsync("I take screenshot of Deleted Email to Supplier Test", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 74
   await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 75
   await testRunner.AndAsync("the table Asset Templates has no records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 76
   await testRunner.AndAsync("I select return", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 77
   await testRunner.AndAsync("I set escalations inactive", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 78
   await testRunner.AndAsync("I take screenshot of Automatic Email to Supplier Test Scenario two", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion

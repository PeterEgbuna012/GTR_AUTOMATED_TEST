// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace GTR_AUTOMATED.Features.MaintenaceProduction.PM
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("3.0.2 - Assigning a PM Work Order Task")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class _3_0_2_AssigningAPMWorkOrderTaskFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/Maintenace & Production/PM", "3.0.2 - Assigning a PM Work Order Task", "AS a Team Leader you need to Assign A single PM Work Order where there is no plan" +
                "ned labour requirement generating an assignment.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "GTRDWM-REG-302.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01) Create a PM")]
        [NUnit.Framework.CategoryAttribute("Feature:3.0.2-AssigningaPMWorkOrderTask")]
        [NUnit.Framework.TestCaseAttribute("maxadmin", null)]
        public async global::System.Threading.Tasks.Task _01CreateAPM(string role, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Feature:3.0.2-AssigningaPMWorkOrderTask"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("01) Create a PM", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
 await testRunner.GivenAsync("I sign as maxadmin", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
    await testRunner.WhenAsync("I open application Preventive Maintenance, Preventative Maintenance (BRDA)", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
    await testRunner.AndAsync("I create new record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 10
    await testRunner.AndAsync("I set PM Description field to \"TAUTO ASSIGNING PM WO TEST 9.9\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 11
    await testRunner.AndAsync("I choose Select Value from Detail Menu of Asset Group field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table155 = new global::Reqnroll.Table(new string[] {
                            "Asset Group"});
                table155.AddRow(new string[] {
                            "UNIT 387102"});
#line 12
    await testRunner.AndAsync("I filter table Asset Group:", ((string)(null)), table155, "And ");
#line hidden
#line 15
    await testRunner.AndAsync("I select no. 1 record from Asset table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 16
    await testRunner.AndAsync("I set Lead Time Days field to \"182\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
    await testRunner.AndAsync("I set Include this PM in the Forecast[Checkbox] field to False", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
    await testRunner.AndAsync("I open Select Value lookup for Work Type field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table156 = new global::Reqnroll.Table(new string[] {
                            "Work Type"});
                table156.AddRow(new string[] {
                            "=PM"});
#line 19
    await testRunner.AndAsync("I filter table:", ((string)(null)), table156, "And ");
#line hidden
#line 22
    await testRunner.AndAsync("I select no.1 record PM from table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
    await testRunner.AndAsync("I set Priority field to \"6\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 24
    await testRunner.AndAsync("I set Owner Group field to \"RS\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
    await testRunner.AndAsync("I set Interruptible [Checkbox] field to true", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
    await testRunner.AndAsync("I set GL Account field to \"00000-00000-0000\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 27
    await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 28
    await testRunner.AndAsync("I press Change Status button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
    await testRunner.AndAsync("I press the dropdown new status button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 30
    await testRunner.AndAsync("I select active status", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 31
 await testRunner.AndAsync("I set Roll New Status to All Child PMs[Checkbox] field to True", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 32
    await testRunner.AndAsync("I press dialog button OK", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 33
    await testRunner.ThenAsync("field Status has value ACTIVE", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 34
    await testRunner.AndAsync("I take screenshot of Assigning a PM Work Order Task Scenario one", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02) Generating Ad Hoc PM Work Order")]
        [NUnit.Framework.TestCaseAttribute("teamlead", null)]
        public async global::System.Threading.Tasks.Task _02GeneratingAdHocPMWorkOrder(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("02) Generating Ad Hoc PM Work Order", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 43
    await testRunner.GivenAsync("I sign in as teamlead", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 44
    await testRunner.WhenAsync("I open application Preventive Maintenance, Preventative Maintenance (BRDA)", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table157 = new global::Reqnroll.Table(new string[] {
                            "Description",
                            "Status",
                            "Parent"});
                table157.AddRow(new string[] {
                            "TAUTO ASSIGNING PM WO TEST 9.9",
                            "=ACTIVE",
                            "~Null~"});
#line 45
    await testRunner.WhenAsync("I filter table PMs:", ((string)(null)), table157, "When ");
#line hidden
#line 48
    await testRunner.AndAsync("I select no. 1 record from PMs table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 49
    await testRunner.AndAsync("I select action Generate Work Orders", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 50
    await testRunner.AndAsync("I set Use Frequency Criteria[Checkbox] field to false", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 51
    await testRunner.AndAsync("I press the button OK", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 52
    await testRunner.AndAsync("the message appears BMXAA3208I", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 53
    await testRunner.AndAsync("I press the button Ok", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 54
    await testRunner.AndAsync("I take screenshot of Assigning a PM Work Order Task Scenario two", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03) Assigning a PM Work Order Task")]
        [NUnit.Framework.TestCaseAttribute("teamlead", null)]
        public async global::System.Threading.Tasks.Task _03AssigningAPMWorkOrderTask(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("03) Assigning a PM Work Order Task", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 62
  await testRunner.GivenAsync("I sign as teamlead", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 63
  await testRunner.AndAsync("I open application Work Order Tracking BRDA from Favorite Menu", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table158 = new global::Reqnroll.Table(new string[] {
                            "Description",
                            "Status",
                            "Work Type"});
                table158.AddRow(new string[] {
                            "TAUTO ASSIGNING PM WO TEST 9.9",
                            "=SCHEDULED",
                            "=PM"});
#line 64
  await testRunner.WhenAsync("I filter table PM:", ((string)(null)), table158, "When ");
#line hidden
#line 67
    await testRunner.AndAsync("I select no. 1 record from PMs table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 68
  await testRunner.AndAsync("I go to Assignments Tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 69
  await testRunner.AndAsync("I add new row in Assignments Tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 70
  await testRunner.AndAsync("I open Select Value lookup for Labor field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table159 = new global::Reqnroll.Table(new string[] {
                            "Labor"});
                table159.AddRow(new string[] {
                            "CBRUNS"});
#line 71
  await testRunner.AndAsync("I filter Labor table:", ((string)(null)), table159, "And ");
#line hidden
#line 74
  await testRunner.AndAsync("I select no. 1 from Labor table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 75
  await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 76
  await testRunner.AndAsync("I take screenshot of Assigning a PM Work Order Task Scenario three", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion

// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace GTR_AUTOMATED.Features.MaintenaceProduction.EM
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("0.0.1 - Accepting An EM Work Order into the Work Bank")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class _0_0_1_AcceptingAnEMWorkOrderIntoTheWorkBankFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/Maintenace & Production/EM", "0.0.1 - Accepting An EM Work Order into the Work Bank", "An EM work order is scheduled and ready to be assigned to the person who will com" +
                "plete the task.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "GTRDWM-REG-001.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01) Create a EM Work Order")]
        [NUnit.Framework.CategoryAttribute("Feature:0.0.1-AcceptingAnEMWorkOrderintotheWorkBank")]
        [NUnit.Framework.TestCaseAttribute("teamlead", null)]
        public async global::System.Threading.Tasks.Task _01CreateAEMWorkOrder(string role, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Feature:0.0.1-AcceptingAnEMWorkOrderintotheWorkBank"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("01) Create a EM Work Order", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
 await testRunner.GivenAsync("I sign as teamlead", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
 await testRunner.WhenAsync("I open application Work Orders, Fault Reporting (BRDA)", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
    await testRunner.AndAsync("I create new record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 10
    await testRunner.AndAsync("I choose Select Value from Detail Menu of Location field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table173 = new global::Reqnroll.Table(new string[] {
                            "Location"});
                table173.AddRow(new string[] {
                            "HORNSEY"});
#line 11
    await testRunner.AndAsync("I filter table Location:", ((string)(null)), table173, "And ");
#line hidden
#line 14
    await testRunner.AndAsync("I select no. 1 record from Location table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
    await testRunner.AndAsync("I open Select Value lookup for Failure Group field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 16
    await testRunner.AndAsync("I select no. 3 record from Failure Group table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
    await testRunner.AndAsync("I open Select Value lookup for Failure Code field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
    await testRunner.AndAsync("I select no. 1 record from Failure Code table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 19
    await testRunner.AndAsync("I open Select Value lookup for Problem Code field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
    await testRunner.AndAsync("I select no. 1 record from Problem Code table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
    await testRunner.AndAsync("I open Select Value lookup for Repair Facility field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table174 = new global::Reqnroll.Table(new string[] {
                            "Repair Facility"});
                table174.AddRow(new string[] {
                            "HORNSEY"});
#line 22
    await testRunner.AndAsync("I filter table Repair Facility:", ((string)(null)), table174, "And ");
#line hidden
#line 25
 await testRunner.AndAsync("I select no. 1 record from Repair Facility table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
    await testRunner.AndAsync("I open Select Value lookup for Reported Priority", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 27
    await testRunner.AndAsync("I select no. 8 record from Reported Priority table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table175 = new global::Reqnroll.Table(new string[] {
                            "Headcode"});
                table175.AddRow(new string[] {
                            "TAUTO"});
#line 28
    await testRunner.AndAsync("I enter following data to Headcode:", ((string)(null)), table175, "And ");
#line hidden
                global::Reqnroll.Table table176 = new global::Reqnroll.Table(new string[] {
                            "Summary",
                            "Details"});
                table176.AddRow(new string[] {
                            "Accepting An EM Work Order into the Work Bank",
                            "Auto Test EM Work Order"});
#line 31
    await testRunner.AndAsync("I enter following data:", ((string)(null)), table176, "And ");
#line hidden
#line 34
    await testRunner.AndAsync("I route the workflow", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 36
    await testRunner.AndAsync("I press dialog button of Show Duplicate Tickets", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 37
    await testRunner.AndAsync("I route the workflow", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 38
    await testRunner.AndAsync("I set (Radio) field to Raise a Depot Work Order", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 39
    await testRunner.ThenAsync("I press dialog button OK", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 40
    await testRunner.WhenAsync("I go to Related Records tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 41
    await testRunner.AndAsync("I view Related Work Order", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 42
    await testRunner.ThenAsync("field Status has value WAIT-REV", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 43
    await testRunner.AndAsync("I take screenshot of Accepting An EM Work Order into the Work Bank scenario one", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02) Accepting An EM Work Order into the Work Bank")]
        [NUnit.Framework.TestCaseAttribute("teamlead", null)]
        public async global::System.Threading.Tasks.Task _02AcceptingAnEMWorkOrderIntoTheWorkBank(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("02) Accepting An EM Work Order into the Work Bank", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 54
  await testRunner.GivenAsync("I sign as teamlead", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 55
  await testRunner.AndAsync("I open application Work Order Tracking BRDA from Fav Menu", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table177 = new global::Reqnroll.Table(new string[] {
                            "Description",
                            "Status",
                            "Work Type"});
                table177.AddRow(new string[] {
                            "Accepting An EM Work Order into the Work Bank",
                            "=WAIT-REV",
                            "=EM"});
#line 56
     await testRunner.WhenAsync("I filter table EM:", ((string)(null)), table177, "When ");
#line hidden
#line 59
    await testRunner.AndAsync("I select no. 1 record from EM table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 60
    await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 61
 await testRunner.AndAsync("I set (Radio) Box to Accept this Work Order into the Work Bank", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 62
 await testRunner.AndAsync("I press OK dialog button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 63
 await testRunner.AndAsync("work order Status field has value REVIEWED", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 64
 await testRunner.AndAsync("I take screenshot of Accepting An EM Work Order into the Work Bank scenario two", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion

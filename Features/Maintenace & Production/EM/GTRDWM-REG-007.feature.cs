// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace GTR_AUTOMATED.Features.MaintenaceProduction.EM
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("0.0.7 - Approving an EM Work Order")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class _0_0_7_ApprovingAnEMWorkOrderFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/Maintenace & Production/EM", "0.0.7 - Approving an EM Work Order", "You are reviewing Completed Work in your start centre and want to approve it", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "GTRDWM-REG-007.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01) Create a EM Work Order")]
        [NUnit.Framework.CategoryAttribute("Feature:0.0.7-ApprovinganEMWorkOrder")]
        [NUnit.Framework.TestCaseAttribute("teamlead", null)]
        public async global::System.Threading.Tasks.Task _01CreateAEMWorkOrder(string role, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Feature:0.0.7-ApprovinganEMWorkOrder"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("01) Create a EM Work Order", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
 await testRunner.GivenAsync("I sign as teamlead", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
 await testRunner.WhenAsync("I open application Work Orders, Fault Reporting (BRDA)", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 10
    await testRunner.AndAsync("I create new record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 11
    await testRunner.AndAsync("I choose Select Value from Detail Menu of Location field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table154 = new global::Reqnroll.Table(new string[] {
                            "Location"});
                table154.AddRow(new string[] {
                            "HORNSEY"});
#line 12
    await testRunner.AndAsync("I filter table Location:", ((string)(null)), table154, "And ");
#line hidden
#line 15
    await testRunner.AndAsync("I select no. 1 record from Location table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 16
    await testRunner.AndAsync("I open Select Value lookup for Failure Group field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
    await testRunner.AndAsync("I select no. 3 record from Failure Group table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
    await testRunner.AndAsync("I open Select Value lookup for Failure Code field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 19
    await testRunner.AndAsync("I select no. 1 record from Failure Code table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 20
    await testRunner.AndAsync("I open Select Value lookup for Problem Code field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 21
    await testRunner.AndAsync("I select no. 1 record from Problem Code table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
    await testRunner.AndAsync("I open Select Value lookup for Repair Facility field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table155 = new global::Reqnroll.Table(new string[] {
                            "Repair Facility"});
                table155.AddRow(new string[] {
                            "HORNSEY"});
#line 23
    await testRunner.AndAsync("I filter table Repair Facility:", ((string)(null)), table155, "And ");
#line hidden
#line 26
 await testRunner.AndAsync("I select no. 1 record from Repair Facility table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 27
    await testRunner.AndAsync("I open Select Value lookup for Reported Priority", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 28
    await testRunner.AndAsync("I select no. 8 record from Reported Priority table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table156 = new global::Reqnroll.Table(new string[] {
                            "Headcode"});
                table156.AddRow(new string[] {
                            "TAUTO"});
#line 29
    await testRunner.AndAsync("I enter following data to Headcode:", ((string)(null)), table156, "And ");
#line hidden
                global::Reqnroll.Table table157 = new global::Reqnroll.Table(new string[] {
                            "Summary",
                            "Details"});
                table157.AddRow(new string[] {
                            "Approving an EM Work Order",
                            "AUTO TEST EM WORK ORDER"});
#line 32
    await testRunner.AndAsync("I enter following data:", ((string)(null)), table157, "And ");
#line hidden
#line 35
    await testRunner.AndAsync("I route the workflow", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 37
    await testRunner.AndAsync("I press dialog button of Show Duplicate Tickets", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 38
    await testRunner.AndAsync("I route the workflow", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 39
    await testRunner.AndAsync("I set (Radio) field to Raise a Depot Work Order", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 40
    await testRunner.ThenAsync("I press dialog button OK", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 41
    await testRunner.WhenAsync("I go to Related Records tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 42
    await testRunner.AndAsync("I view Related Work Order", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 43
    await testRunner.ThenAsync("field Status has value WAIT-REV", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 44
    await testRunner.AndAsync("I take screenshot of Approving an EM Work Order scenario one", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02) Accepting An EM Work Order into the Work Bank")]
        [NUnit.Framework.TestCaseAttribute("teamlead", null)]
        public async global::System.Threading.Tasks.Task _02AcceptingAnEMWorkOrderIntoTheWorkBank(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("02) Accepting An EM Work Order into the Work Bank", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 55
  await testRunner.GivenAsync("I sign as teamlead", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 56
  await testRunner.AndAsync("I open application Work Order Tracking BRDA from Fav Menu", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table158 = new global::Reqnroll.Table(new string[] {
                            "Description",
                            "Status",
                            "Work Type"});
                table158.AddRow(new string[] {
                            "Approving an EM Work Order",
                            "=WAIT-REV",
                            "=EM"});
#line 57
     await testRunner.WhenAsync("I filter table EM:", ((string)(null)), table158, "When ");
#line hidden
#line 60
    await testRunner.AndAsync("I select no. 1 record from EM table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 61
    await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 62
 await testRunner.AndAsync("I set (Radio) Box to Accept this Work Order into the Work Bank", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 63
 await testRunner.AndAsync("I press OK dialog button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 64
 await testRunner.AndAsync("work order Status field has value REVIEWED", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 65
 await testRunner.AndAsync("I take screenshot of Approving an EM Work Order scenario two", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03)  Assigning an EM Work Orderr")]
        [NUnit.Framework.TestCaseAttribute("teamlead", null)]
        public async global::System.Threading.Tasks.Task _03AssigningAnEMWorkOrderr(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("03)  Assigning an EM Work Orderr", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 76
 await testRunner.GivenAsync("I sign as teamlead", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 77
   await testRunner.AndAsync("I open application Work Order Tracking BRDA from Fav Menu", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table159 = new global::Reqnroll.Table(new string[] {
                            "Description",
                            "Status",
                            "Work Type"});
                table159.AddRow(new string[] {
                            "Approving an EM Work Order",
                            "=REVIEWED",
                            "=EM"});
#line 78
      await testRunner.WhenAsync("I filter table EM:", ((string)(null)), table159, "When ");
#line hidden
#line 81
     await testRunner.AndAsync("I select no. 1 record from EM table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 82
     await testRunner.AndAsync("I go to Assignment tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 83
  await testRunner.AndAsync("I press add new row under Assignments tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 84
  await testRunner.AndAsync("I select Value lookup for Labor field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table160 = new global::Reqnroll.Table(new string[] {
                            "labor"});
                table160.AddRow(new string[] {
                            "ABRACE"});
#line 85
     await testRunner.AndAsync("I filter table labor:", ((string)(null)), table160, "And ");
#line hidden
#line 88
  await testRunner.AndAsync("I select no.2 from labor table record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 89
  await testRunner.AndAsync("I save", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 90
  await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 91
  await testRunner.AndAsync("I set (Radio) Box to Send Work For Execution", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 92
  await testRunner.AndAsync("I click OK dialog button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 93
  await testRunner.AndAsync("I verify Status field has value SCHEDULED", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 94
  await testRunner.AndAsync("I take screenshot of Approving an EM Work Order scenario three", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04) Completing an EM Work Order for Review")]
        [NUnit.Framework.TestCaseAttribute("Maintainer", null)]
        public async global::System.Threading.Tasks.Task _04CompletingAnEMWorkOrderForReview(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("04) Completing an EM Work Order for Review", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 101
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 102
 await testRunner.GivenAsync("I sign as Maintainer", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 103
 await testRunner.AndAsync("I open application Quick Work Order BRDA from Fav Menu", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table161 = new global::Reqnroll.Table(new string[] {
                            "Description",
                            "Status",
                            "Work Type"});
                table161.AddRow(new string[] {
                            "Approving an EM Work Order",
                            "=SCHEDULED",
                            "=EM"});
#line 104
    await testRunner.WhenAsync("I filter table Quick Work Order:", ((string)(null)), table161, "When ");
#line hidden
#line 107
    await testRunner.AndAsync("I select no. 1 record from EM table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 108
 await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 109
 await testRunner.AndAsync("I set (Radio) Box to Start Work order", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 110
 await testRunner.AndAsync("I press dialog Ok", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 111
 await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 112
 await testRunner.AndAsync("I set (Radio) Box to Complete Work Assignment", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 113
 await testRunner.AndAsync("I press dialog Ok", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 114
 await testRunner.AndAsync("I press dialog button close", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 115
 await testRunner.AndAsync("I go to labor tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 116
 await testRunner.AndAsync("I press add new row button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 117
 await testRunner.AndAsync("I choose Select Value from Detail Menu labor field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table162 = new global::Reqnroll.Table(new string[] {
                            "Labor"});
                table162.AddRow(new string[] {
                            "ABRACE"});
#line 118
     await testRunner.AndAsync("I filter table Record labor:", ((string)(null)), table162, "And ");
#line hidden
#line 121
 await testRunner.AndAsync("I select no. 2 record from labor table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 122
 await testRunner.AndAsync("I set labor Start and End time", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 123
 await testRunner.AndAsync("I save", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 124
 await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 125
 await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 126
 await testRunner.AndAsync("I set (Radio) Box to Complete Work Assignment", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 127
 await testRunner.AndAsync("I press dialog Ok", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 128
    await testRunner.AndAsync("I press dialog button close", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 129
    await testRunner.AndAsync("I go to Failure Reporting Tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 130
    await testRunner.AndAsync("I press the button Select Failure Codes", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 134
 await testRunner.AndAsync("I select Faliure Informations", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 135
 await testRunner.AndAsync("I go to Log Tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 136
    await testRunner.AndAsync("I add new row Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table163 = new global::Reqnroll.Table(new string[] {
                            "Summary",
                            "Details"});
                table163.AddRow(new string[] {
                            "Approving an EM Work Order",
                            "COMPLETE EM WORK ORDER AUTO TEST"});
#line 137
    await testRunner.AndAsync("I enter following:", ((string)(null)), table163, "And ");
#line hidden
#line 140
    await testRunner.ThenAsync("the record is saved successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 141
    await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 142
    await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 143
    await testRunner.AndAsync("I set (Radio) Box to Complete Work Assignment", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 144
    await testRunner.AndAsync("I Click dialog Ok button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 145
    await testRunner.AndAsync("I Status field has value COMP-WREV", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 146
    await testRunner.AndAsync("I take screenshot of Approving an EM Work Order test scenario four", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("05) Approving an EM Work Order")]
        [NUnit.Framework.TestCaseAttribute("teamlead", null)]
        public async global::System.Threading.Tasks.Task _05ApprovingAnEMWorkOrder(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("05) Approving an EM Work Order", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 153
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 154
 await testRunner.GivenAsync("I sign as teamlead", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 155
 await testRunner.AndAsync("I open application Work Order Tracking BRDA from Fav Menu", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table164 = new global::Reqnroll.Table(new string[] {
                            "Description",
                            "Status",
                            "Work Type"});
                table164.AddRow(new string[] {
                            "Approving an EM Work Order",
                            "=COMP-WREV",
                            "=EM"});
#line 156
    await testRunner.WhenAsync("I filter table EM:", ((string)(null)), table164, "When ");
#line hidden
#line 159
    await testRunner.AndAsync("I select no. 1 record from EM table", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 160
 await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 161
 await testRunner.AndAsync("I set (Radio) Box to Approve Work Order", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 162
 await testRunner.AndAsync("I press OK button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 163
 await testRunner.AndAsync("I Status field has value COMP", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 164
 await testRunner.AndAsync("I take screenshot of Approving an EM Work Order test scenario five", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion

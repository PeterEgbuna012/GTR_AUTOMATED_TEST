// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace GTR_AUTOMATED.Features.MaintenaceProduction.CM
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("2.0.2 - Creating a Found it Fixed it Work Order")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class _2_0_2_CreatingAFoundItFixedItWorkOrderFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/Maintenace & Production/CM", "2.0.2 - Creating a Found it Fixed it Work Order", "As a Maintainer Team Leader I have been assigned work and want to create a FIFI.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "GTRDWM-REG-202.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01) Create a CM Work Order")]
        [NUnit.Framework.CategoryAttribute("Feature:2.0.2-CreatingaFounditFixeditWorkOrder")]
        [NUnit.Framework.TestCaseAttribute("maxadmin", null)]
        public async global::System.Threading.Tasks.Task _01CreateACMWorkOrder(string role, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Feature:2.0.2-CreatingaFounditFixeditWorkOrder"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("01) Create a CM Work Order", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
 await testRunner.GivenAsync("I sign as maxadmin", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
 await testRunner.AndAsync("I open application Work Order Tracking (BRDA)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 10
 await testRunner.AndAsync("I select create new record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 11
 await testRunner.AndAsync("I set CM Work Order Description field to \'AUTO TEST FIFI WO\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
 await testRunner.AndAsync("I choose Select Value from Detail Menu of Location field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table31 = new global::Reqnroll.Table(new string[] {
                            "Location"});
                table31.AddRow(new string[] {
                            "387102"});
#line 13
 await testRunner.AndAsync("I filter table Location:", ((string)(null)), table31, "And ");
#line hidden
#line 16
 await testRunner.AndAsync("I select no. 1 from Location table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
 await testRunner.AndAsync("I open Select Value lookup for Work Type field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table32 = new global::Reqnroll.Table(new string[] {
                            "Type"});
                table32.AddRow(new string[] {
                            "=CM"});
#line 18
 await testRunner.AndAsync("I filter table Work Type:", ((string)(null)), table32, "And ");
#line hidden
#line 21
 await testRunner.AndAsync("I select no. 1 from Work Type table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
 await testRunner.AndAsync("I choose Select Value from Detail Menu of Repair Facility", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table33 = new global::Reqnroll.Table(new string[] {
                            "Repair Facility"});
                table33.AddRow(new string[] {
                            "HORNSEY"});
#line 23
 await testRunner.AndAsync("I filter table Repair Facility:", ((string)(null)), table33, "And ");
#line hidden
#line 26
 await testRunner.AndAsync("I select no. 1 record from Repair Facility table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 27
 await testRunner.AndAsync("I open Select Value lookup for Priority field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table34 = new global::Reqnroll.Table(new string[] {
                            "Value"});
                table34.AddRow(new string[] {
                            "Next Exam"});
#line 28
 await testRunner.AndAsync("I filter table Priority field:", ((string)(null)), table34, "And ");
#line hidden
#line 31
 await testRunner.AndAsync("I select no. 1 record from Priority table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 32
 await testRunner.AndAsync("I Scheduled Start Date to today\'s date", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 33
 await testRunner.AndAsync("I save CM record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 34
 await testRunner.AndAsync("I verify generated work order number", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 35
 await testRunner.AndAsync("I take screenshot of Creating a Found it Fixed it Work Order test Scenario one", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02) Assigning a CM Work Order")]
        [NUnit.Framework.TestCaseAttribute("teamlead", null)]
        public async global::System.Threading.Tasks.Task _02AssigningACMWorkOrder(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("02) Assigning a CM Work Order", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 44
 await testRunner.GivenAsync("I sign as teamlead", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 45
  await testRunner.AndAsync("I open application Work Order Tracking BRDA from Favorite Menu", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table35 = new global::Reqnroll.Table(new string[] {
                            "Description",
                            "Status"});
                table35.AddRow(new string[] {
                            "AUTO TEST FIFI WO",
                            "=WAIT-REV"});
#line 46
  await testRunner.AndAsync("I filter table CM Work Order:", ((string)(null)), table35, "And ");
#line hidden
#line 49
  await testRunner.AndAsync("I select no. 1 record from CM Work Order table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 50
  await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 51
  await testRunner.AndAsync("I set (Radio) field to Accept this Work Order into the Work Bank", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 52
  await testRunner.AndAsync("I select dialog button ok", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 53
  await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 54
  await testRunner.AndAsync("I set (Radio) field to Send Work for Execution", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 55
  await testRunner.AndAsync("I select Ok dialog button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 56
  await testRunner.AndAsync("I go to Assignments Tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 57
  await testRunner.AndAsync("I add new row in Assignments Tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 58
  await testRunner.AndAsync("I open Select Value lookup for Labor field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table36 = new global::Reqnroll.Table(new string[] {
                            "Labor"});
                table36.AddRow(new string[] {
                            "ISCOTT"});
#line 59
  await testRunner.AndAsync("I filter table Labor:", ((string)(null)), table36, "And ");
#line hidden
#line 62
  await testRunner.AndAsync("I select no. 2 record from Labor table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 64
  await testRunner.AndAsync("I verify CM work order generated", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 65
  await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 66
 await testRunner.AndAsync("I take screenshot of Creating a Found it Fixed it Work Order test Scenario two", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03) Creating a Found it Fixed it Work Order")]
        [NUnit.Framework.TestCaseAttribute("teamlead", null)]
        public async global::System.Threading.Tasks.Task _03CreatingAFoundItFixedItWorkOrder(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("03) Creating a Found it Fixed it Work Order", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 75
 await testRunner.GivenAsync("I sign as teamlead", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 76
    await testRunner.AndAsync("I open application Quick Work Order Tracking (BRDA)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table37 = new global::Reqnroll.Table(new string[] {
                            "Description",
                            "Status",
                            "Work Type"});
                table37.AddRow(new string[] {
                            "AUTO TEST FIFI WO",
                            "=SCHEDULED",
                            "=CM"});
#line 77
    await testRunner.AndAsync("I filter table Quick Work Order:", ((string)(null)), table37, "And ");
#line hidden
#line 80
    await testRunner.AndAsync("I select no. 1 record from Quick Work Order table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 81
    await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 82
    await testRunner.AndAsync("I set (Radio) field to Start Work order", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 83
    await testRunner.AndAsync("I select Ok button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 84
 await testRunner.AndAsync("I select action", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 85
 await testRunner.AndAsync("I select Create Work Order", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 86
 await testRunner.AndAsync("I Select Value lookup for Work Type field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table38 = new global::Reqnroll.Table(new string[] {
                            "Type"});
                table38.AddRow(new string[] {
                            "Found It Fixed It"});
#line 87
    await testRunner.AndAsync("I filter table Follow on Work Type:", ((string)(null)), table38, "And ");
#line hidden
#line 90
 await testRunner.AndAsync("I select no. 1 record from Work Type table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 91
 await testRunner.AndAsync("the record is saved successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 92
 await testRunner.AndAsync("I go to labour Tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 93
 await testRunner.AndAsync("I press new row under Labor Tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 94
    await testRunner.AndAsync("I Select Value from Detail Menu of Labor field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table39 = new global::Reqnroll.Table(new string[] {
                            "Labor"});
                table39.AddRow(new string[] {
                            "ISCOTT"});
#line 95
    await testRunner.AndAsync("I filter table actuals labor:", ((string)(null)), table39, "And ");
#line hidden
#line 98
    await testRunner.AndAsync("I select no. 4 record from table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 99
    await testRunner.AndAsync("I select Start and End time", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 100
    await testRunner.ThenAsync("the record is saved successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 101
    await testRunner.AndAsync("I go to failure reporting tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 102
 await testRunner.AndAsync("I press the button select Failure Codes", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table40 = new global::Reqnroll.Table(new string[] {
                            "Failure Codes"});
                table40.AddRow(new string[] {
                            "455-FC-06"});
#line 103
    await testRunner.AndAsync("I filter table Follow on Failure Codes:", ((string)(null)), table40, "And ");
#line hidden
#line 106
 await testRunner.AndAsync("I select faliure codes", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 107
    await testRunner.AndAsync("I select problem codes", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 108
    await testRunner.AndAsync("I select cause codes", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 109
    await testRunner.AndAsync("I select remedy codes", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 110
 await testRunner.AndAsync("I go to Log tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 111
    await testRunner.AndAsync("I press add new row under Log", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table41 = new global::Reqnroll.Table(new string[] {
                            "Summary",
                            "Details"});
                table41.AddRow(new string[] {
                            "CM WO AUTO TEST",
                            "CM WORK ORDER AUTO TEST"});
#line 112
    await testRunner.AndAsync("I enter following data:", ((string)(null)), table41, "And ");
#line hidden
#line 115
    await testRunner.ThenAsync("the record is saved successfully", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 116
    await testRunner.AndAsync("I press route the workflow button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 117
 await testRunner.AndAsync("I select (Radio) field Complete Work Assignment", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 118
    await testRunner.AndAsync("I press ok dialog button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 119
    await testRunner.AndAsync("I verify COMP-WREV Status", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 120
    await testRunner.AndAsync("I take screenshot of Creating a Found it Fixed it Work Order test Scenario three", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion

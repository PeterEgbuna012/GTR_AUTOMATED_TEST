// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace GTR_AUTOMATED.Features.Administration.CMSScripts
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("0.0.08b - Allocating a Trainee to a Training Course (in Work Order Tracking)")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class _0_0_08B_AllocatingATraineeToATrainingCourseInWorkOrderTrackingFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/Administration/CMS Scripts", "0.0.08b - Allocating a Trainee to a Training Course (in Work Order Tracking)", "To allocate a trainer, classroom and trainee to a scheduled training course using" +
                " the CMS Course Work Orders (MXR) application.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "GTR-UAT-CMS-008b.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01) Creating a new Training Course Work Order")]
        [NUnit.Framework.CategoryAttribute("Feature:0.0.08b-AllocatingaTraineetoaTrainingCourse(inWorkOrderTracking)")]
        [NUnit.Framework.TestCaseAttribute("cms admin", null)]
        public async global::System.Threading.Tasks.Task _01CreatingANewTrainingCourseWorkOrder(string role, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Feature:0.0.08b-AllocatingaTraineetoaTrainingCourse(inWorkOrderTracking)"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("01) Creating a new Training Course Work Order", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
 await testRunner.GivenAsync("I sign as cms admin", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
 await testRunner.AndAsync("I open application Work Order Tracking (BRDA)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 9
 await testRunner.AndAsync("I select create new record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table79 = new global::Reqnroll.Table(new string[] {
                            "Description"});
                table79.AddRow(new string[] {
                            "Allocating a Trainee to a Training Course Test"});
#line 10
 await testRunner.AndAsync("I enter work order:", ((string)(null)), table79, "And ");
#line hidden
#line 13
 await testRunner.AndAsync("I choose Select Value from Detail Menu of Location field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table80 = new global::Reqnroll.Table(new string[] {
                            "Location"});
                table80.AddRow(new string[] {
                            "HORNSEY"});
#line 14
 await testRunner.AndAsync("I filter table Location:", ((string)(null)), table80, "And ");
#line hidden
#line 17
 await testRunner.AndAsync("I select no. 1 from Location table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table81 = new global::Reqnroll.Table(new string[] {
                            "Work Type"});
                table81.AddRow(new string[] {
                            "CMS"});
#line 18
 await testRunner.AndAsync("I set Work Type field:", ((string)(null)), table81, "And ");
#line hidden
#line 21
 await testRunner.AndAsync("I Scheduled Start Date to today\'s date", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
 await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
 await testRunner.AndAsync("I verify work order status WAIT-REV", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 24
 await testRunner.AndAsync("I take screenshot of Allocating a Trainee to a Training Course (in Work Order Tra" +
                        "cking) test scenario one", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
 await testRunner.AndAsync("I return to Maintainer Start Center", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02) Allocating a Trainee to a Training Course (in Work Order Tracking)")]
        [NUnit.Framework.TestCaseAttribute("cms admin", null)]
        public async global::System.Threading.Tasks.Task _02AllocatingATraineeToATrainingCourseInWorkOrderTracking(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("02) Allocating a Trainee to a Training Course (in Work Order Tracking)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 34
    await testRunner.GivenAsync("I sign as cms admin", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 35
    await testRunner.AndAsync("I open application CMS Course Work Order (MXR)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table82 = new global::Reqnroll.Table(new string[] {
                            "Description",
                            "Status"});
                table82.AddRow(new string[] {
                            "Allocating a Trainee to a Training Course Test",
                            "=WAIT-REV"});
#line 36
 await testRunner.AndAsync("I filter table CMS Course Work Order (MXR):", ((string)(null)), table82, "And ");
#line hidden
#line 39
 await testRunner.AndAsync("I select no. 1 from CMS Course Work Order table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 40
 await testRunner.AndAsync("I select New Row button under Assignments section", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 41
 await testRunner.AndAsync("I choose Select Value from Detail Menu of the Craft Field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table83 = new global::Reqnroll.Table(new string[] {
                            "Craft"});
                table83.AddRow(new string[] {
                            "CLASSROOM"});
#line 42
 await testRunner.AndAsync("I filter Craft table:", ((string)(null)), table83, "And ");
#line hidden
#line 45
 await testRunner.AndAsync("I select no. 1 from Craft table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 46
 await testRunner.AndAsync("I choose Select Value from Detail Menu of the labor field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 47
 await testRunner.AndAsync("I select no. 1 from labor table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 48
 await testRunner.AndAsync("I select New Row button under Assignments section", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 49
 await testRunner.AndAsync("I choose Select Value from Detail Menu of the Craft Field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table84 = new global::Reqnroll.Table(new string[] {
                            "Craft",
                            "Skill Level"});
                table84.AddRow(new string[] {
                            "TRAINING",
                            "TRAINER-ASSESS"});
#line 50
 await testRunner.AndAsync("I filter Craft and skill level table:", ((string)(null)), table84, "And ");
#line hidden
#line 53
 await testRunner.AndAsync("I select no. 1 from Craft and skill levl table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 54
 await testRunner.AndAsync("I choose Select Value from Detail Menu of the labor field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 55
 await testRunner.AndAsync("I select no. 1 from labor table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 56
 await testRunner.AndAsync("I select New Row button under Assignments section", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 57
 await testRunner.AndAsync("I choose Select Value from Detail Menu of the Craft Field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table85 = new global::Reqnroll.Table(new string[] {
                            "Craft"});
                table85.AddRow(new string[] {
                            "DELEGATE"});
#line 58
 await testRunner.AndAsync("I filter Craft table:", ((string)(null)), table85, "And ");
#line hidden
#line 61
 await testRunner.AndAsync("I select no. 1 from Craft table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 62
 await testRunner.AndAsync("I choose Select Value from Detail Menu of the labor field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 63
 await testRunner.AndAsync("I select no. 1 from labor table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 64
 await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 65
 await testRunner.AndAsync("I verify Assignments status is ASSIGNED", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 66
 await testRunner.AndAsync("I take screenshot of Allocating a Trainee to a Training Course (in Work Order Tra" +
                        "cking) test scenario two", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion

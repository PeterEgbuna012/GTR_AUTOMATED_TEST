// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace GTR_AUTOMATED.Features.Administration.CMSScripts
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("0.0.04 - Creating new Training Course Job Plans")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class _0_0_04_CreatingNewTrainingCourseJobPlansFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/Administration/CMS Scripts", "0.0.04 - Creating new Training Course Job Plans", @"There is a need to create a new training course job plan(s) (to be applied to a Training Course Work Order for MC Courses and Annual Assessments). There are two steps to this process:

Creating the Job Plan for the Parent Work Order for Assignment of Trainees;
Creating the Job Plan for Children Work Orders to list Tasks for Qualifications.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "GTR-UAT-CMS-004.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01) Creation of a Qualification")]
        [NUnit.Framework.CategoryAttribute("Feature:0.0.04-CreatingnewTrainingCourseJobPlans")]
        [NUnit.Framework.TestCaseAttribute("training manager", null)]
        public async global::System.Threading.Tasks.Task _01CreationOfAQualification(string role, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Feature:0.0.04-CreatingnewTrainingCourseJobPlans"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("01) Creation of a Qualification", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 10
   await testRunner.GivenAsync("I sign as training manager", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 11
   await testRunner.AndAsync("I open application Qualifications", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 12
   await testRunner.AndAsync("I select New Qualification", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table15 = new global::Reqnroll.Table(new string[] {
                            "Qualification Code",
                            "Qualification Description"});
                table15.AddRow(new string[] {
                            "QUF 50",
                            "Qualification for Unit Familiarity"});
#line 13
   await testRunner.AndAsync("I enter Qualifications Details:", ((string)(null)), table15, "And ");
#line hidden
#line 16
   await testRunner.AndAsync("I open Select Value lookup of Qualification Type field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table16 = new global::Reqnroll.Table(new string[] {
                            "Qualification Type"});
                table16.AddRow(new string[] {
                            "REFRESH"});
#line 17
   await testRunner.AndAsync("I select Qualification Type:", ((string)(null)), table16, "And ");
#line hidden
#line 20
      await testRunner.AndAsync("I select Qualification Type", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table17 = new global::Reqnroll.Table(new string[] {
                            "Parent Qualification",
                            "Duration"});
                table17.AddRow(new string[] {
                            "TQ0099",
                            "2"});
#line 21
   await testRunner.AndAsync("I enter following:", ((string)(null)), table17, "And ");
#line hidden
#line 24
   await testRunner.AndAsync("I open Select Value lookup of Duration Period field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
      await testRunner.AndAsync("I select Years from the list", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table18 = new global::Reqnroll.Table(new string[] {
                            "Required Use Length"});
                table18.AddRow(new string[] {
                            "6"});
#line 26
   await testRunner.AndAsync("I enter Required Use Length:", ((string)(null)), table18, "And ");
#line hidden
#line 29
   await testRunner.AndAsync("I open Select Value lookup of Required Use Period field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 30
      await testRunner.AndAsync("I select MONTHS from the list", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 31
   await testRunner.AndAsync("I select New Row under the Required Craft and Skill Level section", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 32
   await testRunner.AndAsync("I choose Select Value from Detail Menu of Craft field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table19 = new global::Reqnroll.Table(new string[] {
                            "Craft",
                            "Skill-Level"});
                table19.AddRow(new string[] {
                            "TRAINING",
                            "SEMI-SKILLED"});
#line 33
   await testRunner.AndAsync("I filter table Craft and Skill Level:", ((string)(null)), table19, "And ");
#line hidden
#line 36
      await testRunner.AndAsync("I select no. 1 record from Craft and Skill Level table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 37
   await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 38
   await testRunner.AndAsync("I take screenshot of Craft Skill-Level", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 39
   await testRunner.AndAsync("I delete Craft Skill-Level", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 40
   await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 41
   await testRunner.AndAsync("I change qualifications change status inactive", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 42
   await testRunner.AndAsync("I select Ok Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 43
   await testRunner.AndAsync("I verify status is INACTIVE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 44
      await testRunner.AndAsync("I take screenshot of Creating new Training Course Job Plans Test Scenario one", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02) Creating new Training Course Job Plans")]
        [NUnit.Framework.TestCaseAttribute("cms admin team leader", null)]
        public async global::System.Threading.Tasks.Task _02CreatingNewTrainingCourseJobPlans(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("02) Creating new Training Course Job Plans", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 54
  await testRunner.GivenAsync("I sign as cms admin team leader", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 55
  await testRunner.AndAsync("I open application Job Plans (Tr)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 56
  await testRunner.AndAsync("I select New Job Plan", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table20 = new global::Reqnroll.Table(new string[] {
                            "ID",
                            "Description"});
                table20.AddRow(new string[] {
                            "CMS-210",
                            "New Starter Assessment - Tasks"});
#line 57
  await testRunner.AndAsync("I enter Job Plan:", ((string)(null)), table20, "And ");
#line hidden
#line 60
  await testRunner.AndAsync("I open Select Value lookup of Organisation field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 61
  await testRunner.AndAsync("I select no. 1 record from Organisation table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 62
  await testRunner.AndAsync("I open Select Value lookup of Site field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 63
  await testRunner.AndAsync("I select no. 1 record from Site table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table21 = new global::Reqnroll.Table(new string[] {
                            "Duration"});
                table21.AddRow(new string[] {
                            "4:00"});
#line 64
  await testRunner.AndAsync("I enter Duration:", ((string)(null)), table21, "And ");
#line hidden
#line 67
  await testRunner.AndAsync("I select New Row button under Job Plans Tasks section", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table22 = new global::Reqnroll.Table(new string[] {
                            "Task Description"});
                table22.AddRow(new string[] {
                            "Unit familiarity"});
#line 68
  await testRunner.AndAsync("I enter Task Description:", ((string)(null)), table22, "And ");
#line hidden
#line 71
  await testRunner.AndAsync("I open Select Value lookup of Qualifications field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 72
  await testRunner.AndAsync("I select yes dialog button of System Message", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 73
  await testRunner.AndAsync("I select New Row", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 74
  await testRunner.AndAsync("I open Select Value lookup of Qualification Requirements field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table23 = new global::Reqnroll.Table(new string[] {
                            "Qualification"});
                table23.AddRow(new string[] {
                            "QUF 50"});
#line 75
  await testRunner.AndAsync("I filter Qualification Requirements:", ((string)(null)), table23, "And ");
#line hidden
#line 78
  await testRunner.AndAsync("I select no. 1 record from Qualification Requirements table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 79
  await testRunner.AndAsync("I Press Ok dialog button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 80
  await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 81
  await testRunner.AndAsync("I set Qualification status ACTIVE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 82
  await testRunner.AndAsync("I click Ok", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 83
  await testRunner.AndAsync("I verify Job Plans status ACTIVE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 84
  await testRunner.AndAsync("I take screenshot of Creating new Training Course Job Plans Test Scenario two", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03) Create Job Plan to Assign Trainee")]
        [NUnit.Framework.TestCaseAttribute("cms admin team leader", null)]
        public async global::System.Threading.Tasks.Task _03CreateJobPlanToAssignTrainee(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("03) Create Job Plan to Assign Trainee", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 92
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 93
  await testRunner.GivenAsync("I sign as cms admin team leader", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 94
  await testRunner.AndAsync("I open application Job Plans (Tr)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 95
  await testRunner.AndAsync("I select New Job Plan", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table24 = new global::Reqnroll.Table(new string[] {
                            "ID",
                            "Description"});
                table24.AddRow(new string[] {
                            "CMS-202",
                            "New Starter Assessment"});
#line 96
  await testRunner.AndAsync("I enter Job Plan:", ((string)(null)), table24, "And ");
#line hidden
#line 99
  await testRunner.AndAsync("I open Select Value lookup of Organisation field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 100
  await testRunner.AndAsync("I select no. 1 record from Organisation table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 101
  await testRunner.AndAsync("I open Select Value lookup of Site field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 102
  await testRunner.AndAsync("I select no. 1 record from Site table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table25 = new global::Reqnroll.Table(new string[] {
                            "Duration"});
                table25.AddRow(new string[] {
                            "4:00"});
#line 103
  await testRunner.AndAsync("I enter Duration:", ((string)(null)), table25, "And ");
#line hidden
#line 106
  await testRunner.AndAsync("I select New Row button under Job Plans Tasks section", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table26 = new global::Reqnroll.Table(new string[] {
                            "Task Description"});
                table26.AddRow(new string[] {
                            "Unit familiarity"});
#line 107
  await testRunner.AndAsync("I enter Task Description:", ((string)(null)), table26, "And ");
#line hidden
#line 110
  await testRunner.AndAsync("I open Select Value lookup of Nested Job Plan field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table27 = new global::Reqnroll.Table(new string[] {
                            "Description"});
                table27.AddRow(new string[] {
                            "New Starter Assessment - Tasks"});
#line 111
   await testRunner.AndAsync("I filter Nested Job Plan:", ((string)(null)), table27, "And ");
#line hidden
#line 114
  await testRunner.AndAsync("I select no. 1 record from Nested Job Plan table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 115
     await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 116
  await testRunner.AndAsync("I select New Row button under Job Plans Tasks section", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table28 = new global::Reqnroll.Table(new string[] {
                            "Task Description"});
                table28.AddRow(new string[] {
                            "Unit familiarity 2"});
#line 117
  await testRunner.AndAsync("I enter Task Description:", ((string)(null)), table28, "And ");
#line hidden
#line 120
  await testRunner.AndAsync("I open Select Value lookup of Nested Job Plan field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table29 = new global::Reqnroll.Table(new string[] {
                            "Description"});
                table29.AddRow(new string[] {
                            "New Starter Assessment - Tasks"});
#line 121
  await testRunner.AndAsync("I filter Nested Job Plan:", ((string)(null)), table29, "And ");
#line hidden
#line 124
  await testRunner.AndAsync("I select no. 1 record from Nested Job Plan table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 125
  await testRunner.AndAsync("I select New Row button under Job Plans Tasks section", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table30 = new global::Reqnroll.Table(new string[] {
                            "Task Description"});
                table30.AddRow(new string[] {
                            "Unit familiarity 3"});
#line 126
  await testRunner.AndAsync("I enter Task Description:", ((string)(null)), table30, "And ");
#line hidden
#line 129
  await testRunner.AndAsync("I open Select Value lookup of Nested Job Plan field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table31 = new global::Reqnroll.Table(new string[] {
                            "Description"});
                table31.AddRow(new string[] {
                            "New Starter Assessment - Tasks"});
#line 130
  await testRunner.AndAsync("I filter Nested Job Plan:", ((string)(null)), table31, "And ");
#line hidden
#line 133
  await testRunner.AndAsync("I select no. 1 record from Nested Job Plan table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 134
  await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 135
  await testRunner.AndAsync("I select New Row button under Planned Labor section", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table32 = new global::Reqnroll.Table(new string[] {
                            "Task Value"});
                table32.AddRow(new string[] {
                            "10"});
#line 136
  await testRunner.AndAsync("I enter Task Value:", ((string)(null)), table32, "And ");
#line hidden
#line 139
     await testRunner.AndAsync("I choose Select Value from Detail Menu of Craft", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table33 = new global::Reqnroll.Table(new string[] {
                            "Craft",
                            "Skill-Level"});
                table33.AddRow(new string[] {
                            "TRAINING",
                            "SKILLED"});
#line 140
  await testRunner.AndAsync("I filter table Craft:", ((string)(null)), table33, "And ");
#line hidden
#line 143
     await testRunner.AndAsync("I select no. 2 record from Craft table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 144
  await testRunner.AndAsync("I select New Row button under Planned Labor section", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table34 = new global::Reqnroll.Table(new string[] {
                            "Task Value"});
                table34.AddRow(new string[] {
                            "20"});
#line 145
  await testRunner.AndAsync("I enter Task Value:", ((string)(null)), table34, "And ");
#line hidden
#line 148
     await testRunner.AndAsync("I choose Select Value from Detail Menu of Craft", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table35 = new global::Reqnroll.Table(new string[] {
                            "Craft",
                            "Skill-Level"});
                table35.AddRow(new string[] {
                            "TRAINING",
                            "SKILLED"});
#line 149
  await testRunner.AndAsync("I filter table Craft:", ((string)(null)), table35, "And ");
#line hidden
#line 152
     await testRunner.AndAsync("I select no. 2 record from Craft table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 153
  await testRunner.AndAsync("I select New Row button under Planned Labor section", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table36 = new global::Reqnroll.Table(new string[] {
                            "Task Value"});
                table36.AddRow(new string[] {
                            "30"});
#line 154
  await testRunner.AndAsync("I enter Task Value:", ((string)(null)), table36, "And ");
#line hidden
#line 157
     await testRunner.AndAsync("I choose Select Value from Detail Menu of Craft", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table37 = new global::Reqnroll.Table(new string[] {
                            "Craft",
                            "Skill-Level"});
                table37.AddRow(new string[] {
                            "TRAINING",
                            "SKILLED"});
#line 158
  await testRunner.AndAsync("I filter table Craft:", ((string)(null)), table37, "And ");
#line hidden
#line 161
     await testRunner.AndAsync("I select no. 2 record from Craft table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 162
     await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 163
  await testRunner.AndAsync("I set Job Plan status ACTIVE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 164
  await testRunner.AndAsync("I click Ok", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 165
  await testRunner.AndAsync("I verify status ACTIVE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 166
  await testRunner.AndAsync("I take screenshot of Creating new Training Course Job Plans Test Scenario three", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04) Delete Training Course Job Plans")]
        [NUnit.Framework.TestCaseAttribute("training manager", null)]
        public async global::System.Threading.Tasks.Task _04DeleteTrainingCourseJobPlans(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("04) Delete Training Course Job Plans", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 174
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 175
      await testRunner.GivenAsync("I sign as training manager", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 176
   await testRunner.AndAsync("I open application Job Plans (Tr)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table38 = new global::Reqnroll.Table(new string[] {
                            "Job Plans"});
                table38.AddRow(new string[] {
                            "CMS-210"});
#line 177
   await testRunner.AndAsync("I filter table Job Plans:", ((string)(null)), table38, "And ");
#line hidden
#line 180
      await testRunner.AndAsync("I select no. 1 record from Job Plans table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 181
   await testRunner.AndAsync("I select delete Job Plans", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 182
   await testRunner.AndAsync("I press Yes button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 183
   await testRunner.AndAsync("I verify Job Plans table has no records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 184
   await testRunner.AndAsync("I take screenshot of Creating new Training Course Job Plans Test Scenario four", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("05) Delete Job Plan")]
        [NUnit.Framework.TestCaseAttribute("training manager", null)]
        public async global::System.Threading.Tasks.Task _05DeleteJobPlan(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("05) Delete Job Plan", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 192
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 193
     await testRunner.GivenAsync("I sign as training manager", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 194
  await testRunner.AndAsync("I open application Job Plans (Tr)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table39 = new global::Reqnroll.Table(new string[] {
                            "Job Plans"});
                table39.AddRow(new string[] {
                            "CMS-202"});
#line 195
  await testRunner.AndAsync("I filter table Job Plans:", ((string)(null)), table39, "And ");
#line hidden
#line 198
     await testRunner.AndAsync("I select no. 1 record from Job Plans table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 199
  await testRunner.AndAsync("I select delect Job Plan", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 200
  await testRunner.AndAsync("I select Yes button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 201
  await testRunner.AndAsync("I verify Job Plans table has no records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 202
  await testRunner.AndAsync("I take screenshot of Creating new Training Course Job Plans Test Scenario five", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("06) Delete Qualification")]
        [NUnit.Framework.TestCaseAttribute("training manager", null)]
        public async global::System.Threading.Tasks.Task _06DeleteQualification(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("06) Delete Qualification", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 211
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 212
      await testRunner.GivenAsync("I sign as training manager", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 213
   await testRunner.AndAsync("I open application Qualifications", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table40 = new global::Reqnroll.Table(new string[] {
                            "Qualifications"});
                table40.AddRow(new string[] {
                            "QUF 50"});
#line 214
   await testRunner.AndAsync("I filter table Qualifications:", ((string)(null)), table40, "And ");
#line hidden
#line 217
      await testRunner.AndAsync("I select no. 1 record from Qualification table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 218
   await testRunner.AndAsync("I select delete Qualifications", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 219
   await testRunner.AndAsync("I press Yes dialog button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 220
   await testRunner.AndAsync("I verify table has no records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 221
   await testRunner.AndAsync("I take screenshot of Creating new Training Course Job Plans Test Scenario six", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion

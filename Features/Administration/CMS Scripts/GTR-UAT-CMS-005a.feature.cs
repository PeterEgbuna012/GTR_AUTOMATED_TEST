// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace GTR_AUTOMATED.Features.Administration.CMSScripts
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("0.0.05a - Creating a new Training Course Work Order Template")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class _0_0_05A_CreatingANewTrainingCourseWorkOrderTemplateFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/Administration/CMS Scripts", "0.0.05a - Creating a new Training Course Work Order Template", "There is a need to create a new training course work order template (for MC Cours" +
                "es or Annual Assessments).", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "GTR-UAT-CMS-005a.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01) Creation of a Qualification")]
        [NUnit.Framework.CategoryAttribute("Feature:0.0.05a-CreatinganewTrainingCourseWorkOrderTemplate")]
        [NUnit.Framework.TestCaseAttribute("training manager", null)]
        public async global::System.Threading.Tasks.Task _01CreationOfAQualification(string role, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Feature:0.0.05a-CreatinganewTrainingCourseWorkOrderTemplate"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("01) Creation of a Qualification", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
   await testRunner.GivenAsync("I sign as training manager", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
   await testRunner.AndAsync("I open application Qualifications", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 9
   await testRunner.AndAsync("I select New Qualification", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table41 = new global::Reqnroll.Table(new string[] {
                            "Qualification Code",
                            "Qualification Description"});
                table41.AddRow(new string[] {
                            "QUFT 5",
                            "Qualification for Unit Familiarity"});
#line 10
   await testRunner.AndAsync("I enter Qualifications Details:", ((string)(null)), table41, "And ");
#line hidden
#line 13
   await testRunner.AndAsync("I open Select Value lookup of Qualification Type field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table42 = new global::Reqnroll.Table(new string[] {
                            "Qualification Type"});
                table42.AddRow(new string[] {
                            "REFRESH"});
#line 14
   await testRunner.AndAsync("I select Qualification Type:", ((string)(null)), table42, "And ");
#line hidden
#line 17
      await testRunner.AndAsync("I select Qualification Type", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table43 = new global::Reqnroll.Table(new string[] {
                            "Parent Qualification",
                            "Duration"});
                table43.AddRow(new string[] {
                            "TQ0099",
                            "2"});
#line 18
   await testRunner.AndAsync("I enter following:", ((string)(null)), table43, "And ");
#line hidden
#line 21
   await testRunner.AndAsync("I open Select Value lookup of Duration Period field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
      await testRunner.AndAsync("I select Years from the list", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table44 = new global::Reqnroll.Table(new string[] {
                            "Required Use Length"});
                table44.AddRow(new string[] {
                            "6"});
#line 23
   await testRunner.AndAsync("I enter Required Use Length:", ((string)(null)), table44, "And ");
#line hidden
#line 26
   await testRunner.AndAsync("I open Select Value lookup of Required Use Period field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 27
      await testRunner.AndAsync("I select MONTHS from the list", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 28
   await testRunner.AndAsync("I select New Row under the Required Craft and Skill Level section", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
   await testRunner.AndAsync("I choose Select Value from Detail Menu of Craft field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table45 = new global::Reqnroll.Table(new string[] {
                            "Craft",
                            "Skill-Level"});
                table45.AddRow(new string[] {
                            "TRAINING",
                            "SEMI-SKILLED"});
#line 30
   await testRunner.AndAsync("I filter table Craft and Skill Level:", ((string)(null)), table45, "And ");
#line hidden
#line 33
      await testRunner.AndAsync("I select no. 1 record from Craft and Skill Level table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 34
   await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 35
   await testRunner.AndAsync("I take screenshot of Craft Skill-Level", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 36
   await testRunner.AndAsync("I delete Craft Skill-Level", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 37
   await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 38
   await testRunner.AndAsync("I change qualifications change status inactive", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 39
   await testRunner.AndAsync("I select Ok Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 40
   await testRunner.AndAsync("I verify status is INACTIVE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 41
      await testRunner.AndAsync("I take screenshot of Creating new Training Course Job Plans Test Scenario one", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02) Creating new Training Course Job Plans")]
        [NUnit.Framework.TestCaseAttribute("cms admin team leader", null)]
        public async global::System.Threading.Tasks.Task _02CreatingNewTrainingCourseJobPlans(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("02) Creating new Training Course Job Plans", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 52
     await testRunner.GivenAsync("I sign as cms admin team leader", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 53
  await testRunner.AndAsync("I open application Job Plans (Tr)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 54
  await testRunner.AndAsync("I select New Job Plan", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table46 = new global::Reqnroll.Table(new string[] {
                            "ID",
                            "Description"});
                table46.AddRow(new string[] {
                            "CMS-108",
                            "New Starter Assessment - Tasks"});
#line 55
  await testRunner.AndAsync("I enter Job Plan:", ((string)(null)), table46, "And ");
#line hidden
#line 58
  await testRunner.AndAsync("I open Select Value lookup of Organisation field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 59
  await testRunner.AndAsync("I select no. 1 record from Organisation table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 60
  await testRunner.AndAsync("I open Select Value lookup of Site field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 61
  await testRunner.AndAsync("I select no. 1 record from Site table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table47 = new global::Reqnroll.Table(new string[] {
                            "Duration"});
                table47.AddRow(new string[] {
                            "4:00"});
#line 62
  await testRunner.AndAsync("I enter Duration:", ((string)(null)), table47, "And ");
#line hidden
#line 65
  await testRunner.AndAsync("I select New Row button under Job Plans Tasks section", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table48 = new global::Reqnroll.Table(new string[] {
                            "Task Description"});
                table48.AddRow(new string[] {
                            "Training Course Job Plans Test"});
#line 66
  await testRunner.AndAsync("I enter Task Description:", ((string)(null)), table48, "And ");
#line hidden
#line 69
  await testRunner.AndAsync("I open Select Value lookup of Qualifications field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 70
  await testRunner.AndAsync("I select yes dialog button of System Message", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 71
  await testRunner.AndAsync("I select New Row", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 72
  await testRunner.AndAsync("I open Select Value lookup of Qualification Requirements field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table49 = new global::Reqnroll.Table(new string[] {
                            "Qualification"});
                table49.AddRow(new string[] {
                            "QUFT 5"});
#line 73
  await testRunner.AndAsync("I filter Qualification Requirements:", ((string)(null)), table49, "And ");
#line hidden
#line 76
  await testRunner.AndAsync("I select no. 1 record from Qualification Requirements table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 77
  await testRunner.AndAsync("I Press Ok dialog button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 78
  await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 79
  await testRunner.AndAsync("I set Qualification status ACTIVE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 80
  await testRunner.AndAsync("I click Ok", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 81
  await testRunner.AndAsync("I verify Job Plans status ACTIVE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 82
  await testRunner.AndAsync("I take screenshot of Creating a new Training Course Work Order Template Test Scen" +
                        "ario one", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03) Creating a new Training Course Work Order Template")]
        [NUnit.Framework.TestCaseAttribute("training manager", null)]
        public async global::System.Threading.Tasks.Task _03CreatingANewTrainingCourseWorkOrderTemplate(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("03) Creating a new Training Course Work Order Template", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 94
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 95
  await testRunner.GivenAsync("I sign as training manager", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 96
  await testRunner.AndAsync("I open application Work Order Template (BRDA)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 97
  await testRunner.AndAsync("I select new record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table50 = new global::Reqnroll.Table(new string[] {
                            "ID",
                            "Description"});
                table50.AddRow(new string[] {
                            "TEST_CMS5",
                            "New Starter Assessment WO Template"});
#line 98
  await testRunner.AndAsync("I enter Work Order Template Details:", ((string)(null)), table50, "And ");
#line hidden
#line 101
  await testRunner.AndAsync("I choose Select Value from Detail Menu of Asset Group field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 102
  await testRunner.AndAsync("I select no. 1 record from Asset Group table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 103
  await testRunner.AndAsync("I open Select Value lookup of Work Type field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table51 = new global::Reqnroll.Table(new string[] {
                            "Work Type"});
                table51.AddRow(new string[] {
                            "CMS"});
#line 104
  await testRunner.AndAsync("I filter Work Type:", ((string)(null)), table51, "And ");
#line hidden
#line 107
  await testRunner.AndAsync("I select no. 1 record from Template Work Type table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 108
  await testRunner.AndAsync("I choose Select Value from Detail Menu of Job Plan field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table52 = new global::Reqnroll.Table(new string[] {
                            "Job Plan"});
                table52.AddRow(new string[] {
                            "CMS-108"});
#line 109
  await testRunner.AndAsync("I filter Job Plan:", ((string)(null)), table52, "And ");
#line hidden
#line 112
  await testRunner.AndAsync("I select no. 1 record from Job Plan table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 113
   await testRunner.AndAsync("I set Work Order Template status to ACTIVE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 114
     await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 115
  await testRunner.AndAsync("I verify template status ACTIVE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 116
  await testRunner.AndAsync("I take screenshot of Creating a new Training Course Work Order Template Test Scen" +
                        "ario two", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04) Delete Training Course Work Order Template")]
        [NUnit.Framework.TestCaseAttribute("maxadmin", null)]
        public async global::System.Threading.Tasks.Task _04DeleteTrainingCourseWorkOrderTemplate(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("04) Delete Training Course Work Order Template", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 126
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 127
      await testRunner.GivenAsync("I sign as maxadmin", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 128
   await testRunner.AndAsync("I open application Work Order Template (BRDA)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table53 = new global::Reqnroll.Table(new string[] {
                            "ID"});
                table53.AddRow(new string[] {
                            "TEST_CMS5"});
#line 129
   await testRunner.AndAsync("I filter table Work Order Template:", ((string)(null)), table53, "And ");
#line hidden
#line 132
      await testRunner.AndAsync("I select no. 1 record from Work Order Template table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 133
   await testRunner.AndAsync("I select delete Work Order Template record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 134
   await testRunner.AndAsync("I select Yes button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 135
   await testRunner.AndAsync("I verify Work Order Template table has no records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 136
   await testRunner.AndAsync("I take screenshot of Creating a new Training Course Work Order Template Test Scen" +
                        "ario three", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("05) Delete Job Plan")]
        [NUnit.Framework.TestCaseAttribute("training manager", null)]
        public async global::System.Threading.Tasks.Task _05DeleteJobPlan(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("05) Delete Job Plan", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 147
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 148
     await testRunner.GivenAsync("I sign as training manager", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 149
  await testRunner.AndAsync("I open application Job Plans (Tr)", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table54 = new global::Reqnroll.Table(new string[] {
                            "Job Plans"});
                table54.AddRow(new string[] {
                            "CMS-108"});
#line 150
  await testRunner.AndAsync("I filter table Job Plans:", ((string)(null)), table54, "And ");
#line hidden
#line 153
     await testRunner.AndAsync("I select no. 1 record from Job Plans table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 154
  await testRunner.AndAsync("I select delect Job Plan", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 155
  await testRunner.AndAsync("I select Yes button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 156
  await testRunner.AndAsync("I verify Job Plans table has no records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 157
  await testRunner.AndAsync("I take screenshot of Creating a new Training Course Work Order Template Test Scen" +
                        "ario four", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("06) Delete Qualification")]
        [NUnit.Framework.TestCaseAttribute("training manager", null)]
        public async global::System.Threading.Tasks.Task _06DeleteQualification(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("06) Delete Qualification", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 166
   this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 167
      await testRunner.GivenAsync("I sign as training manager", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 168
   await testRunner.AndAsync("I open application Qualifications", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table55 = new global::Reqnroll.Table(new string[] {
                            "Qualifications"});
                table55.AddRow(new string[] {
                            "QUFT 5"});
#line 169
   await testRunner.AndAsync("I filter table Qualifications:", ((string)(null)), table55, "And ");
#line hidden
#line 172
      await testRunner.AndAsync("I select no. 1 record from Qualification table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 173
   await testRunner.AndAsync("I select delete Qualifications", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 174
   await testRunner.AndAsync("I press Yes dialog button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 175
   await testRunner.AndAsync("I verify table has no records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 176
   await testRunner.AndAsync("I take screenshot of Creating new Training Course Job Plans Test Scenario six", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion

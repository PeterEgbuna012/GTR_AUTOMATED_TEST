// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace GTR_AUTOMATED.Features.Administration.CMSScripts
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("0.0.02 - Association of a Qualification to a Labour Record")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class _0_0_02_AssociationOfAQualificationToALabourRecordFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/Administration/CMS Scripts", "0.0.02 - Association of a Qualification to a Labour Record", "As a CMS Admin user/Training Manager, there is a need to associate a Qualificatio" +
                "n to a Labor record", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "GTR-UAT-CMS-002.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01) Creation of a Qualification")]
        [NUnit.Framework.CategoryAttribute("Feature:0.0.02-AssociationofaQualificationtoaLabourRecord")]
        [NUnit.Framework.TestCaseAttribute("training manager", null)]
        public async global::System.Threading.Tasks.Task _01CreationOfAQualification(string role, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Feature:0.0.02-AssociationofaQualificationtoaLabourRecord"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("01) Creation of a Qualification", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
   await testRunner.GivenAsync("I sign as training manager", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
   await testRunner.AndAsync("I open application Qualifications", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 9
   await testRunner.AndAsync("I select New Qualification", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "Qualification Code",
                            "Qualification Description"});
                table7.AddRow(new string[] {
                            "TAUTO 15",
                            "Qualification for Unit Familiarity"});
#line 10
   await testRunner.AndAsync("I enter Qualifications Details:", ((string)(null)), table7, "And ");
#line hidden
#line 13
   await testRunner.AndAsync("I open Select Value lookup of Qualification Type field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "Qualification Type"});
                table8.AddRow(new string[] {
                            "REFRESH"});
#line 14
   await testRunner.AndAsync("I select Qualification Type:", ((string)(null)), table8, "And ");
#line hidden
#line 17
      await testRunner.AndAsync("I select Qualification Type", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                            "Parent Qualification",
                            "Duration"});
                table9.AddRow(new string[] {
                            "TQ0099",
                            "1"});
#line 18
   await testRunner.AndAsync("I enter following:", ((string)(null)), table9, "And ");
#line hidden
#line 21
   await testRunner.AndAsync("I open Select Value lookup of Duration Period field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
      await testRunner.AndAsync("I select Years from the list", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 23
   await testRunner.AndAsync("I select New Row under the Required Craft and Skill Level section", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 24
   await testRunner.AndAsync("I choose Select Value from Detail Menu of Craft field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table10 = new global::Reqnroll.Table(new string[] {
                            "Craft",
                            "Skill-Level"});
                table10.AddRow(new string[] {
                            "TRAINING",
                            "SEMI-SKILLED"});
#line 25
   await testRunner.AndAsync("I filter table Craft and Skill Level:", ((string)(null)), table10, "And ");
#line hidden
#line 28
      await testRunner.AndAsync("I select no. 1 record from Craft and Skill Level table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
   await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 30
   await testRunner.AndAsync("I take screenshot of Craft Skill Level", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 31
   await testRunner.AndAsync("I delete Craft Skill-Level", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 32
   await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 33
   await testRunner.AndAsync("I verify status is ACTIVE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 35
   await testRunner.AndAsync("I take screenshot of Association of a Qualification to a Labour Record test", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02) Association of a Qualification to a Labour Record")]
        [NUnit.Framework.TestCaseAttribute("cms admin", null)]
        public async global::System.Threading.Tasks.Task _02AssociationOfAQualificationToALabourRecord(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("02) Association of a Qualification to a Labour Record", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 46
   await testRunner.GivenAsync("I sign as cms admin", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 47
   await testRunner.AndAsync("I open application Labor", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table11 = new global::Reqnroll.Table(new string[] {
                            "labor"});
                table11.AddRow(new string[] {
                            "ARICHARDS"});
#line 48
   await testRunner.AndAsync("I filter table labor:", ((string)(null)), table11, "And ");
#line hidden
#line 51
   await testRunner.AndAsync("I select no. 1 record from labor table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 52
   await testRunner.AndAsync("I go to Qualifications tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 53
   await testRunner.AndAsync("I select New Row Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 54
   await testRunner.AndAsync("I choose Select Value from Detail Menu of Qualification field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table12 = new global::Reqnroll.Table(new string[] {
                            "Qualification"});
                table12.AddRow(new string[] {
                            "TAUTO 15"});
#line 55
   await testRunner.AndAsync("I filter table Qualification:", ((string)(null)), table12, "And ");
#line hidden
#line 58
   await testRunner.AndAsync("I select no. 1 record from Qualification table record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 59
      await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 60
   await testRunner.AndAsync("I take screenshot of Association of a Qualification to a Labour Record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03) Set Qualification Inactive")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.TestCaseAttribute("maxadmin", null)]
        public async global::System.Threading.Tasks.Task _03SetQualificationInactive(string role, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("03) Set Qualification Inactive", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 69
      await testRunner.GivenAsync("I sign as maxadmin", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 70
   await testRunner.AndAsync("I open application Labor", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table13 = new global::Reqnroll.Table(new string[] {
                            "labor"});
                table13.AddRow(new string[] {
                            "ARICHARDS"});
#line 71
   await testRunner.AndAsync("I filter table labor:", ((string)(null)), table13, "And ");
#line hidden
#line 74
   await testRunner.AndAsync("I select no. 1 record from labor table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 75
   await testRunner.AndAsync("I go to Qualifications tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 76
   await testRunner.AndAsync("I select the filter option", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table14 = new global::Reqnroll.Table(new string[] {
                            "Qualification"});
                table14.AddRow(new string[] {
                            "TAUTO 15"});
#line 77
   await testRunner.AndAsync("I filter Qualification table:", ((string)(null)), table14, "And ");
#line hidden
#line 80
   await testRunner.AndAsync("I select no. 1 from Qualification table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 81
   await testRunner.AndAsync("I set qualifications status inactive", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 82
   await testRunner.AndAsync("I select Ok Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 83
   await testRunner.AndAsync("I verify status is INACTIVE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 84
   await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 85
   await testRunner.AndAsync("I take screenshot of Set Qualification Inactive", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion

// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace GTR_AUTOMATED.Features.Administration.CMSScripts
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("0.0.07a - Allocating a Trainer & Classroom to a Training Course (in Graphical Ass" +
        "ignment)")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class _0_0_07A_AllocatingATrainerClassroomToATrainingCourseInGraphicalAssignmentFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features/Administration/CMS Scripts", "0.0.07a - Allocating a Trainer & Classroom to a Training Course (in Graphical Ass" +
                "ignment)", "There is a need to assign a trainer and classroom to a training course (in Graphi" +
                "cal Assignment)", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "GTR-UAT-CMS-007a.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01) Allocating a Trainer & Classroom to a Training Course (in Graphical Assignmen" +
            "t)")]
        [NUnit.Framework.CategoryAttribute("Feature:0.0.07a-AllocatingaTrainer&ClassroomtoaTrainingCourse(inGraphicalAssignme" +
            "nt)")]
        [NUnit.Framework.TestCaseAttribute("maxadmin", null)]
        public async global::System.Threading.Tasks.Task _01AllocatingATrainerClassroomToATrainingCourseInGraphicalAssignment(string role, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Feature:0.0.07a-AllocatingaTrainer&ClassroomtoaTrainingCourse(inGraphicalAssignme" +
                        "nt)"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("01) Allocating a Trainer & Classroom to a Training Course (in Graphical Assignmen" +
                    "t)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
    await testRunner.GivenAsync("I sign as maxadmin", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
 await testRunner.AndAsync("I open application Graphical Scheduling", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 9
 await testRunner.AndAsync("I select create new schedule", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table66 = new global::Reqnroll.Table(new string[] {
                            "ID",
                            "Description"});
                table66.AddRow(new string[] {
                            "TEST-CMS",
                            "Work List for Scheduled CMS Work Orders"});
#line 10
 await testRunner.AndAsync("I enter Schedule ID:", ((string)(null)), table66, "And ");
#line hidden
                global::Reqnroll.Table table67 = new global::Reqnroll.Table(new string[] {
                            "Long Description"});
                table67.AddRow(new string[] {
                            "Allocating a Trainer & Classroom to a Training Course (in Graphical Assignment) L" +
                                "ong Description AUTO TEST"});
#line 13
 await testRunner.AndAsync("I enter Long Description :", ((string)(null)), table67, "And ");
#line hidden
#line 16
 await testRunner.AndAsync("I select the Ok button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
 await testRunner.AndAsync("I choose Select Value from Detail Menu of calendar field", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
 await testRunner.AndAsync("I select GTRBASE", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 19
 await testRunner.AndAsync("I select Copy Query button under Work Queries section", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table68 = new global::Reqnroll.Table(new string[] {
                            "Query"});
                table68.AddRow(new string[] {
                            "MXR_CMS_SCHEDULED_ADMIN"});
#line 20
 await testRunner.AndAsync("I filter table Query:", ((string)(null)), table68, "And ");
#line hidden
#line 23
 await testRunner.AndAsync("I select no. 1 from Query table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 24
 await testRunner.AndAsync("I press dialog ok button of copy Query", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
 await testRunner.AndAsync("I save record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
 await testRunner.AndAsync("I wait for Query to load", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 27
 await testRunner.AndAsync("I select list view button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table69 = new global::Reqnroll.Table(new string[] {
                            "ID"});
                table69.AddRow(new string[] {
                            "TEST-CMS"});
#line 28
 await testRunner.AndAsync("I filter Graphical Scheduling Table:", ((string)(null)), table69, "And ");
#line hidden
#line 31
 await testRunner.AndAsync("I select no. 1 from Graphical Scheduling table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 32
 await testRunner.AndAsync("I go to tab Graphical View", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 33
 await testRunner.AndAsync("I wait for Graphical page to load", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 34
 await testRunner.AndAsync("I select Commit Changes", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 35
 await testRunner.AndAsync("I click yes dialog button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 36
 await testRunner.AndAsync("I press OK dialog button of system message", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 37
 await testRunner.AndAsync("I change status to Approved", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 38
 await testRunner.AndAsync("I select ok", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 39
 await testRunner.AndAsync("I go to tab Schedule", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 40
 await testRunner.AndAsync("I verify status APPROVED", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 41
 await testRunner.AndAsync("I take screenshot of Allocating a Trainer & Classroom to a Training Course (in Gr" +
                        "aphical Assignment) Test Scenario one", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02) Delete Allocating a Trainer & Classroom to a Training Course (in Graphical As" +
            "signment)")]
        [NUnit.Framework.TestCaseAttribute("maxadmin", null)]
        public async global::System.Threading.Tasks.Task _02DeleteAllocatingATrainerClassroomToATrainingCourseInGraphicalAssignment(string role, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("role", role);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("02) Delete Allocating a Trainer & Classroom to a Training Course (in Graphical As" +
                    "signment)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 51
      await testRunner.GivenAsync("I sign as maxadmin", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 52
   await testRunner.AndAsync("I open application Graphical Scheduling", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table70 = new global::Reqnroll.Table(new string[] {
                            "ID"});
                table70.AddRow(new string[] {
                            "TEST-CMS"});
#line 53
   await testRunner.AndAsync("I filter table Graphical Scheduling:", ((string)(null)), table70, "And ");
#line hidden
#line 56
      await testRunner.AndAsync("I select no. 1 record from Graphical Scheduling table records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 57
   await testRunner.AndAsync("I select delete Graphical Scheduling record", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 58
   await testRunner.AndAsync("I select Yes button", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 59
   await testRunner.AndAsync("I verify Graphical Scheduling table has no records", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 60
      await testRunner.AndAsync("I take screenshot of Delete Allocating a Trainer & Classroom to a Training Course" +
                        " (in Graphical Assignment) Test Scenario two", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
